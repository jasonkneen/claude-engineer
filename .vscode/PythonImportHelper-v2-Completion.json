[
    {
        "label": "math,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math.",
        "description": "math.",
        "detail": "math.",
        "documentation": {}
    },
    {
        "label": "dill",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dill",
        "description": "dill",
        "detail": "dill",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "StringIO",
        "description": "StringIO",
        "detail": "StringIO",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pands",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pands",
        "description": "pands",
        "detail": "pands",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Object",
        "importPath": "my_lib",
        "description": "my_lib",
        "isExtraImport": true,
        "detail": "my_lib",
        "documentation": {}
    },
    {
        "label": "Object3",
        "importPath": "my_lib",
        "description": "my_lib",
        "isExtraImport": true,
        "detail": "my_lib",
        "documentation": {}
    },
    {
        "label": "Object2",
        "importPath": "my_lib",
        "description": "my_lib",
        "isExtraImport": true,
        "detail": "my_lib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "lib15",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib1",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib2",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib3",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib4",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib5",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib6",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib7",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib8",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib9",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib10",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib11",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib12",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib13",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib14",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib3",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "google.protobuf.descriptor_pb2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.protobuf.descriptor_pb2",
        "description": "google.protobuf.descriptor_pb2",
        "detail": "google.protobuf.descriptor_pb2",
        "documentation": {}
    },
    {
        "label": "Bar",
        "importPath": "source",
        "description": "source",
        "isExtraImport": true,
        "detail": "source",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "pairwise",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "TavilyClient",
        "importPath": "tavily",
        "description": "tavily",
        "isExtraImport": true,
        "detail": "tavily",
        "documentation": {}
    },
    {
        "label": "TavilyClient",
        "importPath": "tavily",
        "description": "tavily",
        "isExtraImport": true,
        "detail": "tavily",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "anthropic",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "anthropic",
        "description": "anthropic",
        "detail": "anthropic",
        "documentation": {}
    },
    {
        "label": "Anthropic",
        "importPath": "anthropic",
        "description": "anthropic",
        "isExtraImport": true,
        "detail": "anthropic",
        "documentation": {}
    },
    {
        "label": "APIStatusError",
        "importPath": "anthropic",
        "description": "anthropic",
        "isExtraImport": true,
        "detail": "anthropic",
        "documentation": {}
    },
    {
        "label": "APIError",
        "importPath": "anthropic",
        "description": "anthropic",
        "isExtraImport": true,
        "detail": "anthropic",
        "documentation": {}
    },
    {
        "label": "Anthropic",
        "importPath": "anthropic",
        "description": "anthropic",
        "isExtraImport": true,
        "detail": "anthropic",
        "documentation": {}
    },
    {
        "label": "difflib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "difflib",
        "description": "difflib",
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "rich.syntax",
        "description": "rich.syntax",
        "isExtraImport": true,
        "detail": "rich.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "rich.syntax",
        "description": "rich.syntax",
        "isExtraImport": true,
        "detail": "rich.syntax",
        "documentation": {}
    },
    {
        "label": "Markdown",
        "importPath": "rich.markdown",
        "description": "rich.markdown",
        "isExtraImport": true,
        "detail": "rich.markdown",
        "documentation": {}
    },
    {
        "label": "Markdown",
        "importPath": "rich.markdown",
        "description": "rich.markdown",
        "isExtraImport": true,
        "detail": "rich.markdown",
        "documentation": {}
    },
    {
        "label": "Markdown",
        "importPath": "rich.markdown",
        "description": "rich.markdown",
        "isExtraImport": true,
        "detail": "rich.markdown",
        "documentation": {}
    },
    {
        "label": "Markdown",
        "importPath": "rich.markdown",
        "description": "rich.markdown",
        "isExtraImport": true,
        "detail": "rich.markdown",
        "documentation": {}
    },
    {
        "label": "Markdown",
        "importPath": "rich.markdown",
        "description": "rich.markdown",
        "isExtraImport": true,
        "detail": "rich.markdown",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "PromptSession",
        "importPath": "prompt_toolkit",
        "description": "prompt_toolkit",
        "isExtraImport": true,
        "detail": "prompt_toolkit",
        "documentation": {}
    },
    {
        "label": "PromptSession",
        "importPath": "prompt_toolkit",
        "description": "prompt_toolkit",
        "isExtraImport": true,
        "detail": "prompt_toolkit",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "prompt_toolkit.styles",
        "description": "prompt_toolkit.styles",
        "isExtraImport": true,
        "detail": "prompt_toolkit.styles",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "prompt_toolkit.styles",
        "description": "prompt_toolkit.styles",
        "isExtraImport": true,
        "detail": "prompt_toolkit.styles",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "prompt_toolkit.styles",
        "description": "prompt_toolkit.styles",
        "isExtraImport": true,
        "detail": "prompt_toolkit.styles",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "prompt_toolkit.styles",
        "description": "prompt_toolkit.styles",
        "isExtraImport": true,
        "detail": "prompt_toolkit.styles",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "prompt_toolkit.styles",
        "description": "prompt_toolkit.styles",
        "isExtraImport": true,
        "detail": "prompt_toolkit.styles",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "speech_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech_recognition",
        "description": "speech_recognition",
        "detail": "speech_recognition",
        "documentation": {}
    },
    {
        "label": "websockets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets",
        "description": "websockets",
        "detail": "websockets",
        "documentation": {}
    },
    {
        "label": "AudioSegment",
        "importPath": "pydub",
        "description": "pydub",
        "isExtraImport": true,
        "detail": "pydub",
        "documentation": {}
    },
    {
        "label": "play",
        "importPath": "pydub.playback",
        "description": "pydub.playback",
        "isExtraImport": true,
        "detail": "pydub.playback",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "venv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "venv",
        "description": "venv",
        "detail": "venv",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "mimetypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mimetypes",
        "description": "mimetypes",
        "detail": "mimetypes",
        "documentation": {}
    },
    {
        "label": "Progress",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "SpinnerColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "TextColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "BarColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "Progress",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "SpinnerColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "TextColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "BarColumn",
        "importPath": "rich.progress",
        "description": "rich.progress",
        "isExtraImport": true,
        "detail": "rich.progress",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "ollama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ollama",
        "description": "ollama",
        "detail": "ollama",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "tools.base",
        "description": "tools.base",
        "isExtraImport": true,
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "validators",
        "description": "validators",
        "detail": "validators",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "pygments",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygments",
        "description": "pygments",
        "detail": "pygments",
        "documentation": {}
    },
    {
        "label": "highlight",
        "importPath": "pygments",
        "description": "pygments",
        "isExtraImport": true,
        "detail": "pygments",
        "documentation": {}
    },
    {
        "label": "get_lexer_by_name",
        "importPath": "pygments.lexers",
        "description": "pygments.lexers",
        "isExtraImport": true,
        "detail": "pygments.lexers",
        "documentation": {}
    },
    {
        "label": "guess_lexer",
        "importPath": "pygments.lexers",
        "description": "pygments.lexers",
        "isExtraImport": true,
        "detail": "pygments.lexers",
        "documentation": {}
    },
    {
        "label": "HtmlFormatter",
        "importPath": "pygments.formatters",
        "description": "pygments.formatters",
        "isExtraImport": true,
        "detail": "pygments.formatters",
        "documentation": {}
    },
    {
        "label": "ClassNotFound",
        "importPath": "pygments.util",
        "description": "pygments.util",
        "isExtraImport": true,
        "detail": "pygments.util",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "Sandbox",
        "importPath": "e2b_code_interpreter",
        "description": "e2b_code_interpreter",
        "isExtraImport": true,
        "detail": "e2b_code_interpreter",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "must be present",
        "importPath": "tools.base import BaseTool  # This",
        "description": "tools.base import BaseTool  # This",
        "isExtraImport": true,
        "detail": "tools.base import BaseTool  # This",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "JSONEncoder",
        "importPath": "flask.json",
        "description": "flask.json",
        "isExtraImport": true,
        "detail": "flask.json",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "importPath": "ce3",
        "description": "ce3",
        "isExtraImport": true,
        "detail": "ce3",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "pkgutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pkgutil",
        "description": "pkgutil",
        "detail": "pkgutil",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "PromptSession",
        "importPath": "prompt_toolkit.shortcuts",
        "description": "prompt_toolkit.shortcuts",
        "isExtraImport": true,
        "detail": "prompt_toolkit.shortcuts",
        "documentation": {}
    },
    {
        "label": "PromptSession",
        "importPath": "prompt_toolkit.shortcuts",
        "description": "prompt_toolkit.shortcuts",
        "isExtraImport": true,
        "detail": "prompt_toolkit.shortcuts",
        "documentation": {}
    },
    {
        "label": "PromptSession",
        "importPath": "prompt_toolkit.shortcuts",
        "description": "prompt_toolkit.shortcuts",
        "isExtraImport": true,
        "detail": "prompt_toolkit.shortcuts",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "rich.live",
        "description": "rich.live",
        "isExtraImport": true,
        "detail": "rich.live",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "rich.live",
        "description": "rich.live",
        "isExtraImport": true,
        "detail": "rich.live",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "rich.live",
        "description": "rich.live",
        "isExtraImport": true,
        "detail": "rich.live",
        "documentation": {}
    },
    {
        "label": "Spinner",
        "importPath": "rich.spinner",
        "description": "rich.spinner",
        "isExtraImport": true,
        "detail": "rich.spinner",
        "documentation": {}
    },
    {
        "label": "Spinner",
        "importPath": "rich.spinner",
        "description": "rich.spinner",
        "isExtraImport": true,
        "detail": "rich.spinner",
        "documentation": {}
    },
    {
        "label": "Spinner",
        "importPath": "rich.spinner",
        "description": "rich.spinner",
        "isExtraImport": true,
        "detail": "rich.spinner",
        "documentation": {}
    },
    {
        "label": "SystemPrompts",
        "importPath": "prompts.system_prompts",
        "description": "prompts.system_prompts",
        "isExtraImport": true,
        "detail": "prompts.system_prompts",
        "documentation": {}
    },
    {
        "label": "SystemPrompts",
        "importPath": "prompts.system_prompts",
        "description": "prompts.system_prompts",
        "isExtraImport": true,
        "detail": "prompts.system_prompts",
        "documentation": {}
    },
    {
        "label": "SystemPrompts",
        "importPath": "prompts.system_prompts",
        "description": "prompts.system_prompts",
        "isExtraImport": true,
        "detail": "prompts.system_prompts",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "tools.contextmanager",
        "description": "tools.contextmanager",
        "isExtraImport": true,
        "detail": "tools.contextmanager",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "tools.contextmanager",
        "description": "tools.contextmanager",
        "isExtraImport": true,
        "detail": "tools.contextmanager",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "tools.contextmanager",
        "description": "tools.contextmanager",
        "isExtraImport": true,
        "detail": "tools.contextmanager",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Example3",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "peekOfCode": "class Example3(   object ):\n    def __init__    ( self, bar ):\n     #Comments should have a space after the hash.\n     if bar : bar+=1;  bar=bar* bar   ; return bar\n     else:\n                    some_string = \"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"\n                    return (sys.path, some_string)",
        "detail": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "example1",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "peekOfCode": "def example1():\n    ####This is a long comment. This should be wrapped to fit within 72 characters.\n    some_tuple=(   1,2, 3,'a'  );\n    some_variable={'long':'Long code lines should be wrapped within 79 characters.',\n    'other':[math.pi, 100,200,300,9876543210,'This is a long string that goes on'],\n    'more':{'inner':'This whole logical line should be wrapped.',some_tuple:[1,\n    20,300,40000,500000000,60000000000000000]}}\n    return (some_tuple, some_variable)\ndef example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\nclass Example3(   object ):",
        "detail": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "example2",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "peekOfCode": "def example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\nclass Example3(   object ):\n    def __init__    ( self, bar ):\n     #Comments should have a space after the hash.\n     if bar : bar+=1;  bar=bar* bar   ; return bar\n     else:\n                    some_string = \"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "pick",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "peekOfCode": "pick = dill.dumps({\"a\": \"b\", \"c\": \"d\"})\nprint(dill.loads(pick))\nfile_obj = StringIO.StringIO()\ndill.dump([1, 2, \"3\"], file_obj)",
        "detail": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "file_obj",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "peekOfCode": "file_obj = StringIO.StringIO()\ndill.dump([1, 2, \"3\"], file_obj)",
        "detail": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"\ncachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\nimport pands\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "cachedir",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "cachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "description": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "description": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "peekOfCode": "def main(argv):\n    results = []\n    for line in sys.stdin.readlines():\n        filename, line_number, message = line.split(\":\")\n        results.append(\n            to_result_sarif(\n                filename, int(line_number), 0, \"misspelled\", message.strip()\n            )\n        )\n    sarif = {",
        "detail": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"\ncachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\nimport pands\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "cachedir",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "cachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\n# trunk-ignore(flake8/F401): this will trigger a warning to verify that the config is applied\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "aws_access_key_id",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "peekOfCode": "aws_access_key_id = \"AKIAIO5FODNN7EXAMPLE\"\naws_token = \"AKIALALEMEL33243OLIA\"\nprivate_key = \"\"\"-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACA8YWKYztuuvxUIMomc3zv0OdXCT57Cc2cRYu3TMbX9XAAAAJDiKO3C4ijt\nwgAAAAtzc2gtZWQyNTUxOQAAACA8YWKYztuuvxUIMomc3zv0OdXCT57Cc2cRYu3TMbX9XA\nAAAECzmj8DGxg5YHtBK4AmBttMXDQHsPAaCyYHQjJ4YujRBTxhYpjO266/FQgyiZzfO/Q5\n1cJPnsJzZxFi7dMxtf1cAAAADHJvb3RAZGV2aG9zdAE=\n-----END OPENSSH PRIVATE KEY-----\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "documentation": {}
    },
    {
        "label": "aws_token",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "peekOfCode": "aws_token = \"AKIALALEMEL33243OLIA\"\nprivate_key = \"\"\"-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACA8YWKYztuuvxUIMomc3zv0OdXCT57Cc2cRYu3TMbX9XAAAAJDiKO3C4ijt\nwgAAAAtzc2gtZWQyNTUxOQAAACA8YWKYztuuvxUIMomc3zv0OdXCT57Cc2cRYu3TMbX9XA\nAAAECzmj8DGxg5YHtBK4AmBttMXDQHsPAaCyYHQjJ4YujRBTxhYpjO266/FQgyiZzfO/Q5\n1cJPnsJzZxFi7dMxtf1cAAAADHJvb3RAZGV2aG9zdAE=\n-----END OPENSSH PRIVATE KEY-----\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "documentation": {}
    },
    {
        "label": "private_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "peekOfCode": "private_key = \"\"\"-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACA8YWKYztuuvxUIMomc3zv0OdXCT57Cc2cRYu3TMbX9XAAAAJDiKO3C4ijt\nwgAAAAtzc2gtZWQyNTUxOQAAACA8YWKYztuuvxUIMomc3zv0OdXCT57Cc2cRYu3TMbX9XA\nAAAECzmj8DGxg5YHtBK4AmBttMXDQHsPAaCyYHQjJ4YujRBTxhYpjO266/FQgyiZzfO/Q5\n1cJPnsJzZxFi7dMxtf1cAAAADHJvb3RAZGV2aG9zdAE=\n-----END OPENSSH PRIVATE KEY-----\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "description": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "peekOfCode": "def to_result_sarif(path: str, lineno: int, colno: int, rule_id: str, message: str):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "description": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "peekOfCode": "def main(argv):\n    output_json = json.load(sys.stdin)\n    errors = output_json.get(\"errors\", [])\n    results = []\n    for error in errors:\n        rule = error.get(\"rule\", \"\")\n        message = error.get(\"message\", \"\")\n        location = error.get(\"location\")\n        if location:\n            path = location.get(\"file\", \"\")",
        "detail": ".trunk.plugins.trunk.linters.graphql-schema-linter.parse",
        "documentation": {}
    },
    {
        "label": "try_find_string_in_file",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "description": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "peekOfCode": "def try_find_string_in_file(filename, search_string):\n    with open(filename, \"r\") as f:\n        for i, line in enumerate(f):\n            index = line.find(search_string)\n            if index != -1:\n                return i + 1, index + 1\n    return 0, 0\ndef to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):",
        "detail": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "description": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "description": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "peekOfCode": "def main(argv):\n    parser = argparse.ArgumentParser(description=\"Parse output of markdown-link-check\")\n    parser.add_argument(\"--target\", dest=\"target\")\n    args = parser.parse_args()\n    results = []\n    # Line numbers are not reported out of the tool right now - so we regex parse the output to extract issue codes\n    for line in sys.stdin:\n        parse_reg = \"\\s*(\\[.*\\])\\s(.*)→.*Status:\\s*(\\d*)(.*)\"\n        filename = args.target\n        parse_result = re.fullmatch(parse_reg, line, flags=re.DOTALL)",
        "detail": ".trunk.plugins.trunk.linters.markdown-link-check.parse",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "def greeting(name: str) -> str:\n    return \"Hello \" + name\ndef printer() -> None:\n    print(\"Hello\")\ngreeting(3)\ngreeting(b\"Alice\")\na = printer()\nc: str = 4\nfrom source import Bar\ndef bad_foo(bar: Bar) -> str:",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "printer",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "def printer() -> None:\n    print(\"Hello\")\ngreeting(3)\ngreeting(b\"Alice\")\na = printer()\nc: str = 4\nfrom source import Bar\ndef bad_foo(bar: Bar) -> str:\n  return bar.a + bar.b",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "bad_foo",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "def bad_foo(bar: Bar) -> str:\n  return bar.a + bar.b",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "a = printer()\nc: str = 4\nfrom source import Bar\ndef bad_foo(bar: Bar) -> str:\n  return bar.a + bar.b",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "peekOfCode": "class Bar:\n  a: int\n  b: int\ndef bad_function() -> int:\n  print(\"returns nothing\")",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "documentation": {}
    },
    {
        "label": "bad_function",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "peekOfCode": "def bad_function() -> int:\n  print(\"returns nothing\")",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.nancy.parse",
        "description": ".trunk.plugins.trunk.linters.nancy.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.nancy.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.nancy.parse",
        "description": ".trunk.plugins.trunk.linters.nancy.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    nancy_output = json.load(sys.stdin)\n    for vuln_entry in nancy_output.get(\"vulnerable\", []):\n        for vuln in vuln_entry.get(\"Vulnerabilities\", []):\n            results.append(\n                to_result_sarif(\n                    \".\",\n                    0,\n                    0,",
        "detail": ".trunk.plugins.trunk.linters.nancy.parse",
        "documentation": {}
    },
    {
        "label": "get_sarif_severity",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"database_specific\" not in vuln:\n        return DEFAULT_SARIF_SEVERITY\n    vuln_metadata = vuln[\"database_specific\"]\n    if \"severity\" not in vuln_metadata:\n        return DEFAULT_SARIF_SEVERITY\n    severity = vuln_metadata[\"severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)\ndef to_result_sarif(",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, lineno: int, vuln_id: str, description: str, severity: str\n):\n    return {\n        \"level\": severity,\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "join_common_sets",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def join_common_sets(lst):\n    init_len = 0\n    final_len = 1\n    while init_len != final_len:\n        init_len = len(lst)\n        ret = []\n        for s in lst:\n            unique = True\n            for stored_set in ret:\n                if len(stored_set.intersection(s)) > 0:",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "get_preferred_alias",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def get_preferred_alias(aliases):\n    for rx in PREFERRED_ORDER:\n        found_aliases = sorted(alias for alias in aliases if re.match(rx, alias))\n        if len(found_aliases) > 0:\n            return found_aliases[0]\n    return sorted(aliases)[0]\ndef main(argv):\n    try:\n        # On Windows, Unicode characters in the osv-scanner output cause json parsing errors. Filter them out since we don't care about their fields.\n        if sys.platform == \"win32\":",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def main(argv):\n    try:\n        # On Windows, Unicode characters in the osv-scanner output cause json parsing errors. Filter them out since we don't care about their fields.\n        if sys.platform == \"win32\":\n            filtered_stdin = \"\".join(i for i in sys.stdin.read() if ord(i) < 256)\n            osv_json = json.loads(filtered_stdin)\n        else:\n            osv_json = json.load(sys.stdin)\n    except json.decoder.JSONDecodeError as err:\n        if str(err) == \"Expecting value: line 1 column 1 (char 0)\":",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "SARIF_SEVERITY_BY_OSV_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "SARIF_SEVERITY_BY_OSV_SEVERITY = {\n    \"CRITICAL\": \"error\",\n    \"HIGH\": \"error\",\n    \"MODERATE\": \"warning\",\n    \"MEDIUM\": \"warning\",\n    \"LOW\": \"note\",\n}\nDEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SARIF_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "DEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"database_specific\" not in vuln:\n        return DEFAULT_SARIF_SEVERITY\n    vuln_metadata = vuln[\"database_specific\"]\n    if \"severity\" not in vuln_metadata:\n        return DEFAULT_SARIF_SEVERITY\n    severity = vuln_metadata[\"severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "PREFERRED_ORDER",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "PREFERRED_ORDER = [\"GHSA-.*\", \"CVE-.*\", \"PYSEC-.*\"]\ndef get_preferred_alias(aliases):\n    for rx in PREFERRED_ORDER:\n        found_aliases = sorted(alias for alias in aliases if re.match(rx, alias))\n        if len(found_aliases) > 0:\n            return found_aliases[0]\n    return sorted(aliases)[0]\ndef main(argv):\n    try:\n        # On Windows, Unicode characters in the osv-scanner output cause json parsing errors. Filter them out since we don't care about their fields.",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.phpstan.phpstan_parser",
        "description": ".trunk.plugins.trunk.linters.phpstan.phpstan_parser",
        "peekOfCode": "def main():\n    phpstan_json = json.loads(sys.stdin.read())\n    results = []\n    for file_name in phpstan_json[\"files\"]:\n        file_result = phpstan_json[\"files\"][file_name]\n        for result in file_result[\"messages\"]:\n            result = {\n                # We do not have a ruleId\n                \"message\": {\n                    \"text\": result[\"message\"],",
        "detail": ".trunk.plugins.trunk.linters.phpstan.phpstan_parser",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "description": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, description: str, line: int = 0, column: int = 0):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "description": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "peekOfCode": "def main(argv):\n    if len(argv) < 2:\n        print(\"Usage: trivy_to_sarif.py <exit_code>)\")\n        sys.exit(1)\n    if argv[1] == \"0\":\n        results = []\n        sarif = {\n            \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n            \"version\": \"2.1.0\",\n            \"runs\": [{\"results\": results}],",
        "detail": ".trunk.plugins.trunk.linters.prettier.prettier_to_sarif",
        "documentation": {}
    },
    {
        "label": "shift",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "shift = 3\nchoice = raw_input(\"would you like to encode or decode?\")\nword = raw_input(\"Please enter text\")\nletters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "choice = raw_input(\"would you like to encode or decode?\")\nword = raw_input(\"Please enter text\")\nletters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "word = raw_input(\"Please enter text\")\nletters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "letters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "encoded",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "encoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.severity",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.severity",
        "peekOfCode": "def foo():\n    return \"bar\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.severity",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "class A:\n    def method1(self) -> None:\n        self.x = 1\n    def method2(self) -> None:\n        self.x = \"\" # Mypy treats this as an error because `x` is implicitly declared as `int`\na = A()\nreveal_type(a.x)\na.x = \"\" # Pyright allows this because the type of `x` is `int | str`\na.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "class A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)\nprint(A.y)\nprint(A.z) # pyright shows error, mypy shows no error\nclass Color(Enum):\n    RED = 1",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "class Color(Enum):\n    RED = 1\n    BLUE = 2\ndef is_red(color: Color) -> bool:\n    if color == Color.RED:\n        return True\n    elif color == Color.BLUE:\n        return False\n    # mypy reports error: Missing return statement\ndef func(val: int | None):",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "wrong_type",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "def wrong_type(x: int) -> str:\n    return x  # error: Incompatible return value type (got \"int\", expected \"str\")\nclass A:\n    def method1(self) -> None:\n        self.x = 1\n    def method2(self) -> None:\n        self.x = \"\" # Mypy treats this as an error because `x` is implicitly declared as `int`\na = A()\nreveal_type(a.x)\na.x = \"\" # Pyright allows this because the type of `x` is `int | str`",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "is_red",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "def is_red(color: Color) -> bool:\n    if color == Color.RED:\n        return True\n    elif color == Color.BLUE:\n        return False\n    # mypy reports error: Missing return statement\ndef func(val: int | None):\n    if val is not None:\n        def inner_1() -> None:\n            reveal_type(val)",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "def func(val: int | None):\n    if val is not None:\n        def inner_1() -> None:\n            reveal_type(val)\n            print(val + 1)  # mypy produces a false positive error here\n        inner_2 = lambda: reveal_type(val) + 1\n        inner_1()\n        inner_2()",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "a = A()\nreveal_type(a.x)\na.x = \"\" # Pyright allows this because the type of `x` is `int | str`\na.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "a.x",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "a.x = \"\" # Pyright allows this because the type of `x` is `int | str`\na.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)\nprint(A.y)\nprint(A.z) # pyright shows error, mypy shows no error",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "a.x",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "a.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)\nprint(A.y)\nprint(A.z) # pyright shows error, mypy shows no error\nclass Color(Enum):",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "description": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "peekOfCode": "results = []\nfor result in json.load(sys.stdin)[\"generalDiagnostics\"]:\n    parse = {\n        \"level\": result[\"severity\"] if result[\"severity\"] != \"information\" else \"note\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": result[\"file\"],\n                    },",
        "detail": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "documentation": {}
    },
    {
        "label": "sarif",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "description": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "peekOfCode": "sarif = {\n    \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n    \"version\": \"2.1.0\",\n    \"runs\": [{\"results\": results}],\n}\nprint(json.dumps(sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "description": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "description": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    content_json = sys.stdin.read()\n    content = json.loads(content_json)\n    for file_content in content:\n        messages = file_content.get(\"messages\", [])\n        if messages:\n            for msg in messages:\n                results.append(\n                    to_result_sarif(",
        "detail": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.renovate.parse",
        "description": ".trunk.plugins.trunk.linters.renovate.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.renovate.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.renovate.parse",
        "description": ".trunk.plugins.trunk.linters.renovate.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    content = sys.stdin.read()\n    parse_reg = \"(.*WARN:.*could not be parsed)(.*)\"\n    error_section = content.find('\"errors\": [')\n    parse_result = re.fullmatch(parse_reg, content, flags=re.DOTALL)\n    if parse_result:\n        warn_section = parse_result.group(2)\n        json_content = \"{\" + warn_section + \"}\"\n        error_output = json.loads(json_content)",
        "detail": ".trunk.plugins.trunk.linters.renovate.parse",
        "documentation": {}
    },
    {
        "label": "map_severity",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "description": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "peekOfCode": "def map_severity(severity):\n    if severity in [\"convention\", \"refactor\", \"info\"]:\n        return \"note\"\n    if severity in [\"warning\"]:\n        return \"warning\"\n    if severity in [\"error\", \"fatal\"]:\n        return \"error\"\n    return \"none\"\nresults = []\nfor file in json.load(sys.stdin)[\"files\"]:",
        "detail": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "description": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "peekOfCode": "results = []\nfor file in json.load(sys.stdin)[\"files\"]:\n    for offense in file[\"offenses\"]:\n        parse = {\n            \"level\": map_severity(offense[\"severity\"]),\n            \"locations\": [\n                {\n                    \"physicalLocation\": {\n                        \"artifactLocation\": {\n                            \"uri\": file[\"path\"],",
        "detail": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "documentation": {}
    },
    {
        "label": "sarif",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "description": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "peekOfCode": "sarif = {\n    \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n    \"version\": \"2.1.0\",\n    \"runs\": [{\"results\": results}],\n}\nprint(json.dumps(sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.rubocop.rubocop_to_sarif",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\n# trunk-ignore(ruff/F401)\nimport json\nclass NoDocstring(object):\n    def __init__(self, arg1):",
        "detail": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.ruff.test_data.syntax.in",
        "description": ".trunk.plugins.trunk.linters.ruff.test_data.syntax.in",
        "peekOfCode": "def f(): {",
        "detail": ".trunk.plugins.trunk.linters.ruff.test_data.syntax.in",
        "documentation": {}
    },
    {
        "label": "get_region",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "def get_region(entry, column_offset=0):\n    location = entry[\"location\"]\n    region = {\n        \"startColumn\": location[\"column\"] + column_offset,\n        \"startLine\": location[\"row\"],\n    }\n    if \"end_location\" in entry:\n        end_location = entry[\"end_location\"]\n        region[\"endColumn\"] = end_location[\"column\"] + column_offset\n        region[\"endLine\"] = end_location[\"row\"]",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "results = []\ndef get_region(entry, column_offset=0):\n    location = entry[\"location\"]\n    region = {\n        \"startColumn\": location[\"column\"] + column_offset,\n        \"startLine\": location[\"row\"],\n    }\n    if \"end_location\" in entry:\n        end_location = entry[\"end_location\"]\n        region[\"endColumn\"] = end_location[\"column\"] + column_offset",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "ruff_column_index",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "ruff_column_index = 1\nif len(sys.argv) > 1:\n    ruff_column_index = int(sys.argv[1])\nfor result in json.load(sys.stdin):\n    # As of ruff v0.0.260, some autofixable diagnostics may appear redundantly\n    if \"location\" not in result:\n        continue\n    filepath = result[\"filename\"]\n    # Ruff will set code to null for syntax errors\n    rule_id = result[\"code\"] or \"E999\"",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "sarif",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "sarif = {\n    \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n    \"version\": \"2.1.0\",\n    \"runs\": [{\"results\": results}],\n}\nprint(json.dumps(sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "unvalidated_value",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.semgrep.test_data.request",
        "description": ".trunk.plugins.trunk.linters.semgrep.test_data.request",
        "peekOfCode": "def unvalidated_value(request):\n    value = request.GET.get('something')\n    function = globals().get(value)\n    if function:\n        return function(request)",
        "detail": ".trunk.plugins.trunk.linters.semgrep.test_data.request",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "peekOfCode": "def test():\n  substitution = \"hello %s\" % test\n  my_list = List()\n  try:\n    pass\n  except Exception:\n    raise Exception(\"test\")",
        "detail": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "peekOfCode": "test = \"world\"\ndef test():\n  substitution = \"hello %s\" % test\n  my_list = List()\n  try:\n    pass\n  except Exception:\n    raise Exception(\"test\")",
        "detail": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str,\n    start_line_number: int,\n    start_column_number: int,\n    end_line_number: Optional[int],\n    end_column_number: Optional[int],\n    rule_id: str,\n    message: str,\n):\n    region = {",
        "detail": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "peekOfCode": "def main(argv):\n    sqlfluff_json = json.load(sys.stdin)\n    results = []\n    for result in sqlfluff_json:\n        filepath = result[\"filepath\"]\n        for violation in result[\"violations\"]:\n            # In sqlfluff 3.0.0, line_no/line_pos replaced with start_*/end_*\n            start_line_number = violation.get(\"start_line_no\", violation.get(\"line_no\"))\n            start_column_number = violation.get(\n                \"start_line_pos\", violation.get(\"line_pos\")",
        "detail": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.terrascan.sarif_to_sarif",
        "description": ".trunk.plugins.trunk.linters.terrascan.sarif_to_sarif",
        "peekOfCode": "def main(argv):\n    input_sarif = json.load(sys.stdin)\n    # strip \"file:\" from the beginning of each value in the 'file' field in the 'location' object in sarif format\n    for run in input_sarif[\"runs\"]:\n        for result in run[\"results\"]:\n            for location in result[\"locations\"]:\n                location[\"physicalLocation\"][\"artifactLocation\"][\"uri\"] = location[\n                    \"physicalLocation\"\n                ][\"artifactLocation\"][\"uri\"][5:]\n    print(json.dumps(input_sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.terrascan.sarif_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.tfsec.parse",
        "description": ".trunk.plugins.trunk.linters.tfsec.parse",
        "peekOfCode": "def main():\n    original_input = sys.stdin.read()\n    try:\n        index = original_input.index(\"{\")\n        print(original_input[index:])\n    except ValueError:\n        print(original_input)\nif __name__ == \"__main__\":\n    main()",
        "detail": ".trunk.plugins.trunk.linters.tfsec.parse",
        "documentation": {}
    },
    {
        "label": "aws_access_key_id",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "description": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "peekOfCode": "aws_access_key_id = \"AKIAXYZDQCEN4EXAMPLE\"\naws_secret_access_key = \"Tg0pz8Jii8hkLx4+PnUisM8GmKs3a2DK+EXAMPLE\"\n# The below keys are copied from https://github.com/dustin-decker/secretsandstuff\ngithub_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = \"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu",
        "detail": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "documentation": {}
    },
    {
        "label": "aws_secret_access_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "description": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "peekOfCode": "aws_secret_access_key = \"Tg0pz8Jii8hkLx4+PnUisM8GmKs3a2DK+EXAMPLE\"\n# The below keys are copied from https://github.com/dustin-decker/secretsandstuff\ngithub_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = \"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF",
        "detail": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "documentation": {}
    },
    {
        "label": "github_secret",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "description": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "peekOfCode": "github_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = \"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH",
        "detail": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "documentation": {}
    },
    {
        "label": "basic_auth",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "description": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "peekOfCode": "basic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = \"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH\nNT7eP19eVf4dCreibxUmRUaob5DEoHEk8WrxjKWIYUuLeD6AfcW6oXyRU2Yy8Vrt6SqFl5",
        "detail": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "documentation": {}
    },
    {
        "label": "priv_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "description": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "peekOfCode": "priv_key = \"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH\nNT7eP19eVf4dCreibxUmRUaob5DEoHEk8WrxjKWIYUuLeD6AfcW6oXyRU2Yy8Vrt6SqFl5\nWAi47VMFTkDZYS/eCvG53q9UBHpCj7Qvb0vSkCZXBvBIhlw193F3PX4WvO1IXsMwvQ1D1X",
        "detail": ".trunk.plugins.trunk.linters.trivy.test_data.secrets",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, vuln_id: str, description: str, line: int = 0):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "peekOfCode": "def main(argv):\n    trivy_json = json.load(sys.stdin)\n    path = trivy_json[\"ArtifactName\"]\n    results = []\n    for result in trivy_json.get(\"Results\", []):\n        if \"Misconfigurations\" not in result:\n            continue\n        for vuln in result[\"Misconfigurations\"]:\n            vuln_id = vuln[\"ID\"]\n            message = vuln[\"Message\"]",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "documentation": {}
    },
    {
        "label": "get_sarif_severity",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "peekOfCode": "def get_sarif_severity(secret) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"Severity\" not in secret:\n        return DEFAULT_SARIF_SEVERITY\n    severity = secret[\"Severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)\ndef to_result_sarif(path: str, severity: str, code: str, description: str, lineno: int):\n    return {\n        \"level\": severity,\n        \"locations\": [",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, severity: str, code: str, description: str, lineno: int):\n    return {\n        \"level\": severity,\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "peekOfCode": "def main(argv):\n    trivy_json = json.load(sys.stdin)\n    results = []\n    for result in trivy_json.get(\"Results\", []):\n        path = trivy_json[\"ArtifactName\"]\n        for secret in result.get(\"Secrets\", []):\n            code = secret[\"RuleID\"]\n            description = secret[\"Title\"]\n            lineno = secret.get(\"StartLine\", 0)\n            results.append(",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "documentation": {}
    },
    {
        "label": "SARIF_SEVERITY_BY_OSV_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "peekOfCode": "SARIF_SEVERITY_BY_OSV_SEVERITY = {\n    \"CRITICAL\": \"error\",\n    \"HIGH\": \"error\",\n    \"MODERATE\": \"warning\",\n    \"MEDIUM\": \"warning\",\n    \"LOW\": \"note\",\n}\nDEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(secret) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SARIF_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "peekOfCode": "DEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(secret) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"Severity\" not in secret:\n        return DEFAULT_SARIF_SEVERITY\n    severity = secret[\"Severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)\ndef to_result_sarif(path: str, severity: str, code: str, description: str, lineno: int):\n    return {\n        \"level\": severity,",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_secret_to_sarif",
        "documentation": {}
    },
    {
        "label": "get_sarif_severity",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "peekOfCode": "def get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"Severity\" not in vuln:\n        return DEFAULT_SARIF_SEVERITY\n    severity = vuln[\"Severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)\ndef to_result_sarif(\n    path: str, severity: str, vuln_id: str, description: str, lineno: int\n):\n    return {",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, severity: str, vuln_id: str, description: str, lineno: int\n):\n    return {\n        \"level\": severity,\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "peekOfCode": "def main(argv):\n    trivy_json = json.load(sys.stdin)\n    results = []\n    lockfiles = {}\n    for result in trivy_json.get(\"Results\", []):\n        for vuln in result.get(\"Vulnerabilities\", []):\n            pkg_name = vuln[\"PkgName\"]\n            path = trivy_json[\"ArtifactName\"]\n            vuln_id = vuln[\"VulnerabilityID\"]\n            description = vuln[\"Title\"]",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "documentation": {}
    },
    {
        "label": "SARIF_SEVERITY_BY_OSV_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "peekOfCode": "SARIF_SEVERITY_BY_OSV_SEVERITY = {\n    \"CRITICAL\": \"error\",\n    \"HIGH\": \"error\",\n    \"MODERATE\": \"warning\",\n    \"MEDIUM\": \"warning\",\n    \"LOW\": \"note\",\n}\nDEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SARIF_SEVERITY",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "peekOfCode": "DEFAULT_SARIF_SEVERITY = \"error\"\ndef get_sarif_severity(vuln) -> str:\n    \"\"\"Get the SARIF severity appropriate for a given OSV vulnerability entry.\"\"\"\n    if \"Severity\" not in vuln:\n        return DEFAULT_SARIF_SEVERITY\n    severity = vuln[\"Severity\"].upper()\n    return SARIF_SEVERITY_BY_OSV_SEVERITY.get(severity, DEFAULT_SARIF_SEVERITY)\ndef to_result_sarif(\n    path: str, severity: str, vuln_id: str, description: str, lineno: int\n):",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_vuln_to_sarif",
        "documentation": {}
    },
    {
        "label": "aws_access_key_id",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "aws_access_key_id = \"AKIAXYZDQCEN4EXAMPLE\"\naws_secret_access_key = \"Tg0pz8Jii8hkLx4+PnUisM8GmKs3a2DK+EXAMPLE\"\n# The below keys are copied from https://github.com/dustin-decker/secretsandstuff\ngithub_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "aws_secret_access_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "aws_secret_access_key = \"Tg0pz8Jii8hkLx4+PnUisM8GmKs3a2DK+EXAMPLE\"\n# The below keys are copied from https://github.com/dustin-decker/secretsandstuff\ngithub_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "github_secret",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "github_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "basic_auth",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "basic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH\nNT7eP19eVf4dCreibxUmRUaob5DEoHEk8WrxjKWIYUuLeD6AfcW6oXyRU2Yy8Vrt6SqFl5",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "priv_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "priv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH\nNT7eP19eVf4dCreibxUmRUaob5DEoHEk8WrxjKWIYUuLeD6AfcW6oXyRU2Yy8Vrt6SqFl5\nWAi47VMFTkDZYS/eCvG53q9UBHpCj7Qvb0vSkCZXBvBIhlw193F3PX4WvO1IXsMwvQ1D1X",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, line_number: int, vuln_id: str, description: str):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "sliding_window",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "def sliding_window(iterable, n):\n    # sliding_window('ABCDEFG', 4) --> ABCD BCDE CDEF DEFG\n    it = iter(iterable)\n    window = collections.deque(islice(it, n - 1), maxlen=n)\n    for x in it:\n        window.append(x)\n        yield tuple(window)\nsecret_lineno_cache = {}\nfile_cache = {}\ndef find_line_number(secret, path):",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "find_line_number",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "def find_line_number(secret, path):\n    if path not in file_cache:\n        file_cache[path] = open(path).readlines()\n    if secret not in secret_lineno_cache:\n        secret_lineno_cache[secret] = []\n    secret_length = len(secret.splitlines())\n    lines = file_cache[path]\n    for lineno, window in enumerate(sliding_window(lines, secret_length), 1):\n        # trufflehog can report the same secret multiple times\n        # if it truly appears multiple times, then we want to log different lines for each issue",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "def main(argv):\n    results = []\n    for line in sys.stdin.readlines():\n        vuln_json = json.loads(line)\n        # trufflehog doesn't have vuln IDs\n        # this is the name of the detector that found the error (e.g. AWS, Github, PrivateKey)\n        vuln_id = vuln_json[\"DetectorName\"]\n        # There also isn't description of the error aside from the raw secret, the redacted secret,\n        # and the detector that found it.\n        #",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "secret_lineno_cache",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "secret_lineno_cache = {}\nfile_cache = {}\ndef find_line_number(secret, path):\n    if path not in file_cache:\n        file_cache[path] = open(path).readlines()\n    if secret not in secret_lineno_cache:\n        secret_lineno_cache[secret] = []\n    secret_length = len(secret.splitlines())\n    lines = file_cache[path]\n    for lineno, window in enumerate(sliding_window(lines, secret_length), 1):",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "file_cache",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "file_cache = {}\ndef find_line_number(secret, path):\n    if path not in file_cache:\n        file_cache[path] = open(path).readlines()\n    if secret not in secret_lineno_cache:\n        secret_lineno_cache[secret] = []\n    secret_length = len(secret.splitlines())\n    lines = file_cache[path]\n    for lineno, window in enumerate(sliding_window(lines, secret_length), 1):\n        # trufflehog can report the same secret multiple times",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n#whitespace below vvv\n  #A malindented comment\nif __name__ == \"__main__\" :\n      a=4+1",
        "detail": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n#whitespace below vvv\n  #A malindented comment\nif __name__ == \"__main__\" :\n      a=4+1\n      b=( 2*7 )\n      c = [1,\n           2,",
        "detail": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\n# trunk-ignore(flake8/F401): this will trigger a warning to verify that the config is applied\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"claude-engineer\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"claude-engineer\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"claude-engineer\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"claude-engineer\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"claude-engineer\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "is_installed",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def is_installed(lib_name):\n    return shutil.which(lib_name) is not None\nasync def text_chunker(text: str) -> AsyncIterable[str]:\n    \"\"\"Split text into chunks, ensuring to not break sentences.\"\"\"\n    splitters = (\".\", \",\", \"?\", \"!\", \";\", \":\", \"—\", \"-\", \"(\", \")\", \"[\", \"]\", \"}\", \" \")\n    buffer = \"\"\n    for char in text:\n        if buffer.endswith(splitters):\n            yield buffer + \" \"\n            buffer = char",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "initialize_speech_recognition",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def initialize_speech_recognition():\n    global recognizer, microphone\n    recognizer = sr.Recognizer()\n    microphone = sr.Microphone()\n    # Adjust for ambient noise\n    with microphone as source:\n        recognizer.adjust_for_ambient_noise(source, duration=1)\n    logging.info(\"Speech recognition initialized\")\nasync def voice_input(max_retries=3):\n    global recognizer, microphone",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "cleanup_speech_recognition",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def cleanup_speech_recognition():\n    global recognizer, microphone\n    recognizer = None\n    microphone = None\n    logging.info('Speech recognition objects cleaned up')\ndef process_voice_command(command):\n    if command in VOICE_COMMANDS:\n        action = VOICE_COMMANDS[command]\n        if action == \"exit_voice_mode\":\n            return False, \"Exiting voice mode.\"",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "process_voice_command",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def process_voice_command(command):\n    if command in VOICE_COMMANDS:\n        action = VOICE_COMMANDS[command]\n        if action == \"exit_voice_mode\":\n            return False, \"Exiting voice mode.\"\n        elif action == \"save_chat\":\n            filename = save_chat()\n            return True, f\"Chat saved to {filename}\"\n        elif action == \"reset_conversation\":\n            reset_conversation()",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "setup_virtual_environment",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def setup_virtual_environment() -> Tuple[str, str]:\n    venv_name = \"code_execution_env\"\n    venv_path = os.path.join(os.getcwd(), venv_name)\n    try:\n        if not os.path.exists(venv_path):\n            venv.create(venv_path, with_pip=True)\n        # Activate the virtual environment\n        if sys.platform == \"win32\":\n            activate_script = os.path.join(venv_path, \"Scripts\", \"activate.bat\")\n        else:",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "update_system_prompt",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def update_system_prompt(current_iteration: Optional[int] = None, max_iterations: Optional[int] = None) -> str:\n    global file_contents\n    chain_of_thought_prompt = \"\"\"\n    Answer the user's request using relevant tools (if they are available). Before calling a tool, do some analysis within <thinking></thinking> tags. First, think about which of the provided tools is the relevant tool to answer the user's request. Second, go through each of the required parameters of the relevant tool and determine if the user has directly provided or given enough information to infer a value. When deciding if the parameter can be inferred, carefully consider all the context to see if it supports a specific value. If all of the required parameters are present or can be reasonably inferred, close the thinking tag and proceed with the tool call. BUT, if one of the values for a required parameter is missing, DO NOT invoke the function (not even with fillers for the missing params) and instead, ask the user to provide the missing parameters. DO NOT ask for more information on optional parameters if it is not provided.\n    Do not reflect on the quality of the returned search results in your response.\n    IMPORTANT: Before using the read_multiple_files tool, always check if the files you need are already in your context (system prompt).\n    If the file contents are already available to you, use that information directly instead of calling the read_multiple_files tool.\n    Only use the read_multiple_files tool for files that are not already in your context.\n    When instructing to read a file, always use the full file path.\n    \"\"\"",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "create_folders",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def create_folders(paths):\n    results = []\n    for path in paths:\n        try:\n            # Use os.makedirs with exist_ok=True to create nested directories\n            os.makedirs(path, exist_ok=True)\n            results.append(f\"Folder(s) created: {path}\")\n        except Exception as e:\n            results.append(f\"Error creating folder(s) {path}: {str(e)}\")\n    return \"\\n\".join(results)",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "create_files",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def create_files(files):\n    global file_contents\n    results = []\n    # Handle different input types\n    if isinstance(files, str):\n        # If a string is passed, assume it's a single file path\n        files = [{\"path\": files, \"content\": \"\"}]\n    elif isinstance(files, dict):\n        # If a single dictionary is passed, wrap it in a list\n        files = [files]",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "validate_ai_response",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def validate_ai_response(response_text):\n    if isinstance(response_text, list):\n        # Extract 'text' from each dictionary in the list\n        try:\n            response_text = ' '.join(\n                item['text'] if isinstance(item, dict) and 'text' in item else str(item)\n                for item in response_text\n            )\n        except Exception as e:\n            logging.error(f\"Error processing response_text list: {str(e)}\")",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "parse_search_replace_blocks",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def parse_search_replace_blocks(response_text, use_fuzzy=USE_FUZZY_SEARCH):\n    \"\"\"\n    Parse the response text for SEARCH/REPLACE blocks.\n    Args:\n    response_text (str): The text containing SEARCH/REPLACE blocks.\n    use_fuzzy (bool): Whether to use fuzzy matching for search blocks.\n    Returns:\n    list: A list of dictionaries, each containing 'search', 'replace', and 'similarity' keys.\n    \"\"\"\n    blocks = []",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "highlight_diff",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def highlight_diff(diff_text):\n    return Syntax(diff_text, \"diff\", theme=\"monokai\", line_numbers=True)\ndef generate_diff(original, new, path):\n    diff = list(difflib.unified_diff(\n        original.splitlines(keepends=True),\n        new.splitlines(keepends=True),\n        fromfile=f\"a/{path}\",\n        tofile=f\"b/{path}\",\n        n=3\n    ))",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "generate_diff",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def generate_diff(original, new, path):\n    diff = list(difflib.unified_diff(\n        original.splitlines(keepends=True),\n        new.splitlines(keepends=True),\n        fromfile=f\"a/{path}\",\n        tofile=f\"b/{path}\",\n        n=3\n    ))\n    diff_text = ''.join(diff)\n    highlighted_diff = highlight_diff(diff_text)",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "read_multiple_files",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def read_multiple_files(paths, recursive=False):\n    global file_contents\n    results = []\n    if isinstance(paths, str):\n        paths = [paths]\n    for path in paths:\n        try:\n            abs_path = os.path.abspath(path)\n            if os.path.isdir(abs_path):\n                if recursive:",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "list_files",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def list_files(path=\".\"):\n    try:\n        files = os.listdir(path)\n        return \"\\n\".join(files)\n    except Exception as e:\n        return f\"Error listing files: {str(e)}\"\ndef tavily_search(query):\n    try:\n        response = tavily.qna_search(query=query, search_depth=\"advanced\")\n        return response",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "tavily_search",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def tavily_search(query):\n    try:\n        response = tavily.qna_search(query=query, search_depth=\"advanced\")\n        return response\n    except Exception as e:\n        return f\"Error performing search: {str(e)}\"\ndef stop_process(process_id):\n    global running_processes\n    if process_id in running_processes:\n        process = running_processes[process_id]",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "stop_process",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def stop_process(process_id):\n    global running_processes\n    if process_id in running_processes:\n        process = running_processes[process_id]\n        if sys.platform == \"win32\":\n            process.terminate()\n        else:\n            os.killpg(os.getpgid(process.pid), signal.SIGTERM)\n        del running_processes[process_id]\n        return f\"Process {process_id} has been stopped.\"",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "run_shell_command",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def run_shell_command(command):\n    try:\n        result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True)\n        return {\n            \"stdout\": result.stdout,\n            \"stderr\": result.stderr,\n            \"return_code\": result.returncode\n        }\n    except subprocess.CalledProcessError as e:\n        return {",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "validate_files_structure",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def validate_files_structure(files):\n    if not isinstance(files, (dict, list)):\n        raise ValueError(\"Invalid 'files' structure. Expected a dictionary or a list of dictionaries.\")\n    if isinstance(files, dict):\n        files = [files]\n    for file in files:\n        if not isinstance(file, dict):\n            raise ValueError(\"Each file must be a dictionary.\")\n        if 'path' not in file or 'instructions' not in file:\n            raise ValueError(\"Each file dictionary must contain 'path' and 'instructions' keys.\")",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "scan_folder",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def scan_folder(folder_path: str, output_file: str) -> str:\n    ignored_folders = {'.git', '__pycache__', 'node_modules', 'venv', 'env'}\n    markdown_content = f\"# Folder Scan: {folder_path}\\n\\n\"\n    total_chars = len(markdown_content)\n    max_chars = 600000  # Approximating 150,000 tokens\n    for root, dirs, files in os.walk(folder_path):\n        dirs[:] = [d for d in dirs if d not in ignored_folders]\n        for file in files:\n            file_path = os.path.join(root, file)\n            relative_path = os.path.relpath(file_path, folder_path)",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "encode_image_to_base64",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def encode_image_to_base64(image_path):\n    try:\n        with Image.open(image_path) as img:\n            max_size = (1024, 1024)\n            img.thumbnail(max_size, Image.DEFAULT_STRATEGY)\n            if img.mode != 'RGB':\n                img = img.convert('RGB')\n            img_byte_arr = io.BytesIO()\n            img.save(img_byte_arr, format='JPEG')\n            return base64.b64encode(img_byte_arr.getvalue()).decode('utf-8')",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "save_chat",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def save_chat():\n    # Generate filename\n    now = datetime.datetime.now()\n    filename = f\"Chat_{now.strftime('%H%M')}.md\"\n    # Format conversation history\n    formatted_chat = \"# Claude-3-Sonnet Engineer Chat Log\\n\\n\"\n    for message in conversation_history:\n        if message['role'] == 'user':\n            formatted_chat += f\"## User\\n\\n{message['content']}\\n\\n\"\n        elif message['role'] == 'assistant':",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "reset_code_editor_memory",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def reset_code_editor_memory():\n    global code_editor_memory\n    code_editor_memory = []\n    console.print(Panel(\"Code editor memory has been reset.\", title=\"Reset\", style=\"bold green\"))\ndef reset_conversation():\n    global conversation_history, main_model_tokens, tool_checker_tokens, code_editor_tokens, code_execution_tokens, file_contents, code_editor_files\n    conversation_history = []\n    main_model_tokens = {'input': 0, 'output': 0}\n    tool_checker_tokens = {'input': 0, 'output': 0}\n    code_editor_tokens = {'input': 0, 'output': 0}",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "reset_conversation",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def reset_conversation():\n    global conversation_history, main_model_tokens, tool_checker_tokens, code_editor_tokens, code_execution_tokens, file_contents, code_editor_files\n    conversation_history = []\n    main_model_tokens = {'input': 0, 'output': 0}\n    tool_checker_tokens = {'input': 0, 'output': 0}\n    code_editor_tokens = {'input': 0, 'output': 0}\n    code_execution_tokens = {'input': 0, 'output': 0}\n    file_contents = {}\n    code_editor_files = set()\n    reset_code_editor_memory()",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "display_token_usage",
        "kind": 2,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "def display_token_usage():\n    from rich.table import Table\n    from rich.panel import Panel\n    from rich.box import ROUNDED\n    table = Table(box=ROUNDED)\n    table.add_column(\"Model\", style=\"cyan\")\n    table.add_column(\"Input\", style=\"magenta\")\n    table.add_column(\"Output\", style=\"magenta\")\n    table.add_column(\"Cache Write\", style=\"blue\")\n    table.add_column(\"Cache Read\", style=\"blue\")",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "VOICE_COMMANDS",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "VOICE_COMMANDS = {\n    \"exit voice mode\": \"exit_voice_mode\",\n    \"save chat\": \"save_chat\",\n    \"reset conversation\": \"reset_conversation\"\n}\n# Initialize recognizer and microphone as None\nrecognizer = None\nmicrophone = None\n# 11 Labs TTS\ntts_enabled = True",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "recognizer",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "recognizer = None\nmicrophone = None\n# 11 Labs TTS\ntts_enabled = True\nuse_tts = False\nELEVEN_LABS_API_KEY = os.getenv('ELEVEN_LABS_API_KEY')\nVOICE_ID = 'YOUR VOICE ID'\nMODEL_ID = 'eleven_turbo_v2_5'\ndef is_installed(lib_name):\n    return shutil.which(lib_name) is not None",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "microphone",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "microphone = None\n# 11 Labs TTS\ntts_enabled = True\nuse_tts = False\nELEVEN_LABS_API_KEY = os.getenv('ELEVEN_LABS_API_KEY')\nVOICE_ID = 'YOUR VOICE ID'\nMODEL_ID = 'eleven_turbo_v2_5'\ndef is_installed(lib_name):\n    return shutil.which(lib_name) is not None\nasync def text_chunker(text: str) -> AsyncIterable[str]:",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "tts_enabled",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "tts_enabled = True\nuse_tts = False\nELEVEN_LABS_API_KEY = os.getenv('ELEVEN_LABS_API_KEY')\nVOICE_ID = 'YOUR VOICE ID'\nMODEL_ID = 'eleven_turbo_v2_5'\ndef is_installed(lib_name):\n    return shutil.which(lib_name) is not None\nasync def text_chunker(text: str) -> AsyncIterable[str]:\n    \"\"\"Split text into chunks, ensuring to not break sentences.\"\"\"\n    splitters = (\".\", \",\", \"?\", \"!\", \";\", \":\", \"—\", \"-\", \"(\", \")\", \"[\", \"]\", \"}\", \" \")",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "use_tts",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "use_tts = False\nELEVEN_LABS_API_KEY = os.getenv('ELEVEN_LABS_API_KEY')\nVOICE_ID = 'YOUR VOICE ID'\nMODEL_ID = 'eleven_turbo_v2_5'\ndef is_installed(lib_name):\n    return shutil.which(lib_name) is not None\nasync def text_chunker(text: str) -> AsyncIterable[str]:\n    \"\"\"Split text into chunks, ensuring to not break sentences.\"\"\"\n    splitters = (\".\", \",\", \"?\", \"!\", \";\", \":\", \"—\", \"-\", \"(\", \")\", \"[\", \"]\", \"}\", \" \")\n    buffer = \"\"",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "ELEVEN_LABS_API_KEY",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "ELEVEN_LABS_API_KEY = os.getenv('ELEVEN_LABS_API_KEY')\nVOICE_ID = 'YOUR VOICE ID'\nMODEL_ID = 'eleven_turbo_v2_5'\ndef is_installed(lib_name):\n    return shutil.which(lib_name) is not None\nasync def text_chunker(text: str) -> AsyncIterable[str]:\n    \"\"\"Split text into chunks, ensuring to not break sentences.\"\"\"\n    splitters = (\".\", \",\", \"?\", \"!\", \";\", \":\", \"—\", \"-\", \"(\", \")\", \"[\", \"]\", \"}\", \" \")\n    buffer = \"\"\n    for char in text:",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "VOICE_ID",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "VOICE_ID = 'YOUR VOICE ID'\nMODEL_ID = 'eleven_turbo_v2_5'\ndef is_installed(lib_name):\n    return shutil.which(lib_name) is not None\nasync def text_chunker(text: str) -> AsyncIterable[str]:\n    \"\"\"Split text into chunks, ensuring to not break sentences.\"\"\"\n    splitters = (\".\", \",\", \"?\", \"!\", \";\", \":\", \"—\", \"-\", \"(\", \")\", \"[\", \"]\", \"}\", \" \")\n    buffer = \"\"\n    for char in text:\n        if buffer.endswith(splitters):",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "MODEL_ID",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "MODEL_ID = 'eleven_turbo_v2_5'\ndef is_installed(lib_name):\n    return shutil.which(lib_name) is not None\nasync def text_chunker(text: str) -> AsyncIterable[str]:\n    \"\"\"Split text into chunks, ensuring to not break sentences.\"\"\"\n    splitters = (\".\", \",\", \"?\", \"!\", \";\", \":\", \"—\", \"-\", \"(\", \")\", \"[\", \"]\", \"}\", \" \")\n    buffer = \"\"\n    for char in text:\n        if buffer.endswith(splitters):\n            yield buffer + \" \"",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "anthropic_api_key",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "anthropic_api_key = os.getenv(\"ANTHROPIC_API_KEY\")\nif not anthropic_api_key:\n    raise ValueError(\"ANTHROPIC_API_KEY not found in environment variables\")\nclient = Anthropic(api_key=anthropic_api_key)\n# Initialize the Tavily client\ntavily_api_key = os.getenv(\"TAVILY_API_KEY\")\nif not tavily_api_key:\n    raise ValueError(\"TAVILY_API_KEY not found in environment variables\")\ntavily = TavilyClient(api_key=tavily_api_key)\nconsole = Console()",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "client = Anthropic(api_key=anthropic_api_key)\n# Initialize the Tavily client\ntavily_api_key = os.getenv(\"TAVILY_API_KEY\")\nif not tavily_api_key:\n    raise ValueError(\"TAVILY_API_KEY not found in environment variables\")\ntavily = TavilyClient(api_key=tavily_api_key)\nconsole = Console()\n# Token tracking variables\nmain_model_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ntool_checker_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "tavily_api_key",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "tavily_api_key = os.getenv(\"TAVILY_API_KEY\")\nif not tavily_api_key:\n    raise ValueError(\"TAVILY_API_KEY not found in environment variables\")\ntavily = TavilyClient(api_key=tavily_api_key)\nconsole = Console()\n# Token tracking variables\nmain_model_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ntool_checker_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_editor_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_execution_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "tavily",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "tavily = TavilyClient(api_key=tavily_api_key)\nconsole = Console()\n# Token tracking variables\nmain_model_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ntool_checker_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_editor_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_execution_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\nUSE_FUZZY_SEARCH = True\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "console = Console()\n# Token tracking variables\nmain_model_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ntool_checker_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_editor_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_execution_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\nUSE_FUZZY_SEARCH = True\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []\n# Store file contents (part of the context for MAINMODEL)",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "main_model_tokens",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "main_model_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ntool_checker_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_editor_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_execution_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\nUSE_FUZZY_SEARCH = True\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []\n# Store file contents (part of the context for MAINMODEL)\nfile_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "tool_checker_tokens",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "tool_checker_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_editor_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_execution_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\nUSE_FUZZY_SEARCH = True\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []\n# Store file contents (part of the context for MAINMODEL)\nfile_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)\ncode_editor_memory = []",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "code_editor_tokens",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "code_editor_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\ncode_execution_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\nUSE_FUZZY_SEARCH = True\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []\n# Store file contents (part of the context for MAINMODEL)\nfile_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)\ncode_editor_memory = []\n# Files already present in code editor's context",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "code_execution_tokens",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "code_execution_tokens = {'input': 0, 'output': 0, 'cache_write': 0, 'cache_read': 0}\nUSE_FUZZY_SEARCH = True\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []\n# Store file contents (part of the context for MAINMODEL)\nfile_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)\ncode_editor_memory = []\n# Files already present in code editor's context\ncode_editor_files = set()",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "USE_FUZZY_SEARCH",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "USE_FUZZY_SEARCH = True\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []\n# Store file contents (part of the context for MAINMODEL)\nfile_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)\ncode_editor_memory = []\n# Files already present in code editor's context\ncode_editor_files = set()\n# automode flag",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "conversation_history",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "conversation_history = []\n# Store file contents (part of the context for MAINMODEL)\nfile_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)\ncode_editor_memory = []\n# Files already present in code editor's context\ncode_editor_files = set()\n# automode flag\nautomode = False\n# Global dictionary to store running processes",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "file_contents",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "file_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)\ncode_editor_memory = []\n# Files already present in code editor's context\ncode_editor_files = set()\n# automode flag\nautomode = False\n# Global dictionary to store running processes\nrunning_processes = {}\n# Constants",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "code_editor_memory",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "code_editor_memory = []\n# Files already present in code editor's context\ncode_editor_files = set()\n# automode flag\nautomode = False\n# Global dictionary to store running processes\nrunning_processes = {}\n# Constants\nCONTINUATION_EXIT_PHRASE = \"AUTOMODE_COMPLETE\"\nMAX_CONTINUATION_ITERATIONS = 25",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "code_editor_files",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "code_editor_files = set()\n# automode flag\nautomode = False\n# Global dictionary to store running processes\nrunning_processes = {}\n# Constants\nCONTINUATION_EXIT_PHRASE = \"AUTOMODE_COMPLETE\"\nMAX_CONTINUATION_ITERATIONS = 25\nMAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\nMAINMODEL = \"claude-3-5-sonnet-20241022\"",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "automode",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "automode = False\n# Global dictionary to store running processes\nrunning_processes = {}\n# Constants\nCONTINUATION_EXIT_PHRASE = \"AUTOMODE_COMPLETE\"\nMAX_CONTINUATION_ITERATIONS = 25\nMAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\nMAINMODEL = \"claude-3-5-sonnet-20241022\"\nTOOLCHECKERMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEDITORMODEL = \"claude-3-5-sonnet-20241022\"",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "running_processes",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "running_processes = {}\n# Constants\nCONTINUATION_EXIT_PHRASE = \"AUTOMODE_COMPLETE\"\nMAX_CONTINUATION_ITERATIONS = 25\nMAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\nMAINMODEL = \"claude-3-5-sonnet-20241022\"\nTOOLCHECKERMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEDITORMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEXECUTIONMODEL = \"claude-3-5-sonnet-20241022\"\n# System prompts",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "CONTINUATION_EXIT_PHRASE",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "CONTINUATION_EXIT_PHRASE = \"AUTOMODE_COMPLETE\"\nMAX_CONTINUATION_ITERATIONS = 25\nMAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\nMAINMODEL = \"claude-3-5-sonnet-20241022\"\nTOOLCHECKERMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEDITORMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEXECUTIONMODEL = \"claude-3-5-sonnet-20241022\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Claude, an AI assistant powered by Anthropic's Claude-3.5-Sonnet model, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "MAX_CONTINUATION_ITERATIONS",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "MAX_CONTINUATION_ITERATIONS = 25\nMAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\nMAINMODEL = \"claude-3-5-sonnet-20241022\"\nTOOLCHECKERMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEDITORMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEXECUTIONMODEL = \"claude-3-5-sonnet-20241022\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Claude, an AI assistant powered by Anthropic's Claude-3.5-Sonnet model, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n<capabilities>",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "MAX_CONTEXT_TOKENS",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "MAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\nMAINMODEL = \"claude-3-5-sonnet-20241022\"\nTOOLCHECKERMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEDITORMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEXECUTIONMODEL = \"claude-3-5-sonnet-20241022\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Claude, an AI assistant powered by Anthropic's Claude-3.5-Sonnet model, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n<capabilities>\n1. Creating and managing project structures",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "MAINMODEL",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "MAINMODEL = \"claude-3-5-sonnet-20241022\"\nTOOLCHECKERMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEDITORMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEXECUTIONMODEL = \"claude-3-5-sonnet-20241022\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Claude, an AI assistant powered by Anthropic's Claude-3.5-Sonnet model, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n<capabilities>\n1. Creating and managing project structures\n2. Writing, debugging, and improving code across multiple languages",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "TOOLCHECKERMODEL",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "TOOLCHECKERMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEDITORMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEXECUTIONMODEL = \"claude-3-5-sonnet-20241022\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Claude, an AI assistant powered by Anthropic's Claude-3.5-Sonnet model, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n<capabilities>\n1. Creating and managing project structures\n2. Writing, debugging, and improving code across multiple languages\n3. Providing architectural insights and applying design patterns",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "CODEEDITORMODEL",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "CODEEDITORMODEL = \"claude-3-5-sonnet-20241022\"\nCODEEXECUTIONMODEL = \"claude-3-5-sonnet-20241022\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Claude, an AI assistant powered by Anthropic's Claude-3.5-Sonnet model, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n<capabilities>\n1. Creating and managing project structures\n2. Writing, debugging, and improving code across multiple languages\n3. Providing architectural insights and applying design patterns\n4. Staying current with the latest technologies and best practices",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "CODEEXECUTIONMODEL",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "CODEEXECUTIONMODEL = \"claude-3-5-sonnet-20241022\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Claude, an AI assistant powered by Anthropic's Claude-3.5-Sonnet model, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n<capabilities>\n1. Creating and managing project structures\n2. Writing, debugging, and improving code across multiple languages\n3. Providing architectural insights and applying design patterns\n4. Staying current with the latest technologies and best practices\n5. Analyzing and manipulating files within the project directory",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "BASE_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "BASE_SYSTEM_PROMPT = \"\"\"\nYou are Claude, an AI assistant powered by Anthropic's Claude-3.5-Sonnet model, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n<capabilities>\n1. Creating and managing project structures\n2. Writing, debugging, and improving code across multiple languages\n3. Providing architectural insights and applying design patterns\n4. Staying current with the latest technologies and best practices\n5. Analyzing and manipulating files within the project directory\n6. Performing web searches for up-to-date information\n7. Executing code and analyzing its output within an isolated 'code_execution_env' virtual environment",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "AUTOMODE_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "AUTOMODE_SYSTEM_PROMPT = \"\"\"\nYou are currently in automode. Follow these guidelines:\n<goal_setting>\n1. Goal Setting:\n   - Set clear, achievable goals based on the user's request.\n   - Break down complex tasks into smaller, manageable goals.\n</goal_setting>\n<goal_execution>\n2. Goal Execution:\n   - Work through goals systematically, using appropriate tools for each task.",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "tools",
        "kind": 5,
        "importPath": "Claude-Eng-v2.main",
        "description": "Claude-Eng-v2.main",
        "peekOfCode": "tools = [\n    {\n        \"name\": \"create_folders\",\n        \"description\": \"Create new folders at the specified paths, including nested directories. This tool should be used when you need to create one or more directories (including nested ones) in the project structure. It will create all necessary parent directories if they don't exist.\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"paths\": {\n                    \"type\": \"array\",\n                    \"items\": {",
        "detail": "Claude-Eng-v2.main",
        "documentation": {}
    },
    {
        "label": "update_system_prompt",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def update_system_prompt(current_iteration: Optional[int] = None, max_iterations: Optional[int] = None) -> str:\n    global file_contents\n    chain_of_thought_prompt = \"\"\"\n    Answer the user's request using relevant tools (if they are available). Before calling a tool, do some analysis within <thinking></thinking> tags. First, think about which of the provided tools is the relevant tool to answer the user's request. Second, go through each of the required parameters of the relevant tool and determine if the user has directly provided or given enough information to infer a value. When deciding if the parameter can be inferred, carefully consider all the context to see if it supports a specific value. If all of the required parameters are present or can be reasonably inferred, close the thinking tag and proceed with the tool call. BUT, if one of the values for a required parameter is missing, DO NOT invoke the function (not even with fillers for the missing params) and instead, ask the user to provide the missing parameters. DO NOT ask for more information on optional parameters if it is not provided.\n    Do not reflect on the quality of the returned search results in your response.\n    \"\"\"\n    file_contents_prompt = \"\\n\\nFile Contents:\\n\"\n    for path, content in file_contents.items():\n        file_contents_prompt += f\"\\n--- {path} ---\\n{content}\\n\"\n    if automode:",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "create_folder",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def create_folder(path):\n    try:\n        os.makedirs(path, exist_ok=True)\n        return f\"Folder created: {path}\"\n    except Exception as e:\n        return f\"Error creating folder: {str(e)}\"\ndef create_file(path, content=\"\"):\n    global file_contents\n    try:\n        with open(path, 'w') as f:",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "create_file",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def create_file(path, content=\"\"):\n    global file_contents\n    try:\n        with open(path, 'w') as f:\n            f.write(content)\n        file_contents[path] = content\n        return f\"File created and added to system prompt: {path}\"\n    except Exception as e:\n        return f\"Error creating file: {str(e)}\"\ndef highlight_diff(diff_text):",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "highlight_diff",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def highlight_diff(diff_text):\n    return Syntax(diff_text, \"diff\", theme=\"monokai\", line_numbers=True)\ndef generate_and_apply_diff(original_content, new_content, path):\n    diff = list(difflib.unified_diff(\n        original_content.splitlines(keepends=True),\n        new_content.splitlines(keepends=True),\n        fromfile=f\"a/{path}\",\n        tofile=f\"b/{path}\",\n        n=3\n    ))",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "generate_and_apply_diff",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def generate_and_apply_diff(original_content, new_content, path):\n    diff = list(difflib.unified_diff(\n        original_content.splitlines(keepends=True),\n        new_content.splitlines(keepends=True),\n        fromfile=f\"a/{path}\",\n        tofile=f\"b/{path}\",\n        n=3\n    ))\n    if not diff:\n        return \"No changes detected.\"",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "parse_search_replace_blocks",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def parse_search_replace_blocks(response_text):\n    blocks = []\n    pattern = r'<SEARCH>\\n(.*?)\\n</SEARCH>\\n<REPLACE>\\n(.*?)\\n</REPLACE>'\n    matches = re.findall(pattern, response_text, re.DOTALL)\n    for search, replace in matches:\n        blocks.append({\n            'search': search.strip(),\n            'replace': replace.strip()\n        })\n    return json.dumps(blocks)  # Keep returning JSON string",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "generate_diff",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def generate_diff(original, new, path):\n    diff = list(difflib.unified_diff(\n        original.splitlines(keepends=True),\n        new.splitlines(keepends=True),\n        fromfile=f\"a/{path}\",\n        tofile=f\"b/{path}\",\n        n=3\n    ))\n    diff_text = ''.join(diff)\n    highlighted_diff = highlight_diff(diff_text)",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def read_file(path):\n    global file_contents\n    try:\n        with open(path, 'r') as f:\n            content = f.read()\n        file_contents[path] = content\n        return f\"File '{path}' has been read and stored in the system prompt.\"\n    except Exception as e:\n        return f\"Error reading file: {str(e)}\"\ndef read_multiple_files(paths):",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "read_multiple_files",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def read_multiple_files(paths):\n    global file_contents\n    results = []\n    for path in paths:\n        try:\n            with open(path, 'r') as f:\n                content = f.read()\n            file_contents[path] = content\n            results.append(f\"File '{path}' has been read and stored in the system prompt.\")\n        except Exception as e:",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "list_files",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def list_files(path=\".\"):\n    try:\n        files = os.listdir(path)\n        return \"\\n\".join(files)\n    except Exception as e:\n        return f\"Error listing files: {str(e)}\"\ndef tavily_search(query):\n    try:\n        response = tavily.qna_search(query=query, search_depth=\"advanced\")\n        return response",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "tavily_search",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def tavily_search(query):\n    try:\n        response = tavily.qna_search(query=query, search_depth=\"advanced\")\n        return response\n    except Exception as e:\n        return f\"Error performing search: {str(e)}\"\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "parse_goals",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def parse_goals(response):\n    goals = re.findall(r'Goal \\d+: (.+)', response)\n    return goals\nasync def execute_goals(goals):\n    global automode\n    for i, goal in enumerate(goals, 1):\n        console.print(Panel(f\"Executing Goal {i}: {goal}\", title=\"Goal Execution\", style=\"bold yellow\"))\n        response, _ = await chat_with_ollama(f\"Continue working on goal: {goal}\")\n        if CONTINUATION_EXIT_PHRASE in response:\n            automode = False",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "save_chat",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def save_chat():\n    # Generate filename\n    now = datetime.datetime.now()\n    filename = f\"Chat_{now.strftime('%H%M')}.md\"\n    # Format conversation history\n    formatted_chat = \"# Claude-3-Sonnet Engineer Chat Log\\n\\n\"\n    for message in conversation_history:\n        if message['role'] == 'user':\n            formatted_chat += f\"## User\\n\\n{message['content']}\\n\\n\"\n        elif message['role'] == 'assistant':",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "reset_code_editor_memory",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def reset_code_editor_memory():\n    global code_editor_memory\n    code_editor_memory = []\n    console.print(Panel(\"Code editor memory has been reset.\", title=\"Reset\", style=\"bold green\"))\ndef reset_conversation():\n    global conversation_history, file_contents, code_editor_files\n    conversation_history = []\n    file_contents = {}\n    code_editor_files = set()\n    reset_code_editor_memory()",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "reset_conversation",
        "kind": 2,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "def reset_conversation():\n    global conversation_history, file_contents, code_editor_files\n    conversation_history = []\n    file_contents = {}\n    code_editor_files = set()\n    reset_code_editor_memory()\n    console.print(Panel(\"Conversation history, file contents, code editor memory, and code editor files have been reset.\", title=\"Reset\", style=\"bold green\"))\nasync def main():\n    global automode, conversation_history\n    console.print(Panel(\"Welcome to the Ollama Llama 3.1 Engineer Chat with Multi-Agent and Image Support!\", title=\"Welcome\", style=\"bold green\"))",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "client = ollama.AsyncClient()\n# Initialize the Tavily client\ntavily_api_key = os.getenv(\"TAVILY_API_KEY\")\nif not tavily_api_key:\n    raise ValueError(\"TAVILY_API_KEY not found in environment variables\")\ntavily = TavilyClient(api_key=tavily_api_key)\nconsole = Console()\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []\n# Store file contents (part of the context for MAINMODEL)",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "tavily_api_key",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "tavily_api_key = os.getenv(\"TAVILY_API_KEY\")\nif not tavily_api_key:\n    raise ValueError(\"TAVILY_API_KEY not found in environment variables\")\ntavily = TavilyClient(api_key=tavily_api_key)\nconsole = Console()\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []\n# Store file contents (part of the context for MAINMODEL)\nfile_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "tavily",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "tavily = TavilyClient(api_key=tavily_api_key)\nconsole = Console()\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []\n# Store file contents (part of the context for MAINMODEL)\nfile_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)\ncode_editor_memory = []\n# Files already present in code editor's context\ncode_editor_files = set()",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "console = Console()\n# Set up the conversation memory (maintains context for MAINMODEL)\nconversation_history = []\n# Store file contents (part of the context for MAINMODEL)\nfile_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)\ncode_editor_memory = []\n# Files already present in code editor's context\ncode_editor_files = set()\n# automode flag",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "conversation_history",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "conversation_history = []\n# Store file contents (part of the context for MAINMODEL)\nfile_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)\ncode_editor_memory = []\n# Files already present in code editor's context\ncode_editor_files = set()\n# automode flag\nautomode = False\n# Store file contents",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "file_contents",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "file_contents = {}\n# Code editor memory (maintains some context for CODEEDITORMODEL between calls)\ncode_editor_memory = []\n# Files already present in code editor's context\ncode_editor_files = set()\n# automode flag\nautomode = False\n# Store file contents\nfile_contents = {}\n# Global dictionary to store running processes",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "code_editor_memory",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "code_editor_memory = []\n# Files already present in code editor's context\ncode_editor_files = set()\n# automode flag\nautomode = False\n# Store file contents\nfile_contents = {}\n# Global dictionary to store running processes\nrunning_processes = {}\n# Constants",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "code_editor_files",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "code_editor_files = set()\n# automode flag\nautomode = False\n# Store file contents\nfile_contents = {}\n# Global dictionary to store running processes\nrunning_processes = {}\n# Constants\nCONTINUATION_EXIT_PHRASE = \"AUTOMODE_COMPLETE\"\nMAX_CONTINUATION_ITERATIONS = 25",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "automode",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "automode = False\n# Store file contents\nfile_contents = {}\n# Global dictionary to store running processes\nrunning_processes = {}\n# Constants\nCONTINUATION_EXIT_PHRASE = \"AUTOMODE_COMPLETE\"\nMAX_CONTINUATION_ITERATIONS = 25\nMAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\n# Models",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "file_contents",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "file_contents = {}\n# Global dictionary to store running processes\nrunning_processes = {}\n# Constants\nCONTINUATION_EXIT_PHRASE = \"AUTOMODE_COMPLETE\"\nMAX_CONTINUATION_ITERATIONS = 25\nMAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\n# Models\n# Models that maintain context memory across interactions\nMAINMODEL = \"mistral-nemo\"  # Maintains conversation history and file contents",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "running_processes",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "running_processes = {}\n# Constants\nCONTINUATION_EXIT_PHRASE = \"AUTOMODE_COMPLETE\"\nMAX_CONTINUATION_ITERATIONS = 25\nMAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\n# Models\n# Models that maintain context memory across interactions\nMAINMODEL = \"mistral-nemo\"  # Maintains conversation history and file contents\n# Models that don't maintain context (memory is reset after each call)\nTOOLCHECKERMODEL = \"mistral-nemo\"",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "CONTINUATION_EXIT_PHRASE",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "CONTINUATION_EXIT_PHRASE = \"AUTOMODE_COMPLETE\"\nMAX_CONTINUATION_ITERATIONS = 25\nMAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\n# Models\n# Models that maintain context memory across interactions\nMAINMODEL = \"mistral-nemo\"  # Maintains conversation history and file contents\n# Models that don't maintain context (memory is reset after each call)\nTOOLCHECKERMODEL = \"mistral-nemo\"\nCODEEDITORMODEL = \"mistral-nemo\"\n# System prompts",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "MAX_CONTINUATION_ITERATIONS",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "MAX_CONTINUATION_ITERATIONS = 25\nMAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\n# Models\n# Models that maintain context memory across interactions\nMAINMODEL = \"mistral-nemo\"  # Maintains conversation history and file contents\n# Models that don't maintain context (memory is reset after each call)\nTOOLCHECKERMODEL = \"mistral-nemo\"\nCODEEDITORMODEL = \"mistral-nemo\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "MAX_CONTEXT_TOKENS",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "MAX_CONTEXT_TOKENS = 200000  # Reduced to 200k tokens for context window\n# Models\n# Models that maintain context memory across interactions\nMAINMODEL = \"mistral-nemo\"  # Maintains conversation history and file contents\n# Models that don't maintain context (memory is reset after each call)\nTOOLCHECKERMODEL = \"mistral-nemo\"\nCODEEDITORMODEL = \"mistral-nemo\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Ollama Engineer, an AI assistant powered Ollama models, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "MAINMODEL",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "MAINMODEL = \"mistral-nemo\"  # Maintains conversation history and file contents\n# Models that don't maintain context (memory is reset after each call)\nTOOLCHECKERMODEL = \"mistral-nemo\"\nCODEEDITORMODEL = \"mistral-nemo\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Ollama Engineer, an AI assistant powered Ollama models, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n1. Creating and managing project structures\n2. Writing, debugging, and improving code across multiple languages\n3. Providing architectural insights and applying design patterns",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "TOOLCHECKERMODEL",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "TOOLCHECKERMODEL = \"mistral-nemo\"\nCODEEDITORMODEL = \"mistral-nemo\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Ollama Engineer, an AI assistant powered Ollama models, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n1. Creating and managing project structures\n2. Writing, debugging, and improving code across multiple languages\n3. Providing architectural insights and applying design patterns\n4. Staying current with the latest technologies and best practices\n5. Analyzing and manipulating files within the project directory",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "CODEEDITORMODEL",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "CODEEDITORMODEL = \"mistral-nemo\"\n# System prompts\nBASE_SYSTEM_PROMPT = \"\"\"\nYou are Ollama Engineer, an AI assistant powered Ollama models, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n1. Creating and managing project structures\n2. Writing, debugging, and improving code across multiple languages\n3. Providing architectural insights and applying design patterns\n4. Staying current with the latest technologies and best practices\n5. Analyzing and manipulating files within the project directory\n6. Performing web searches for up-to-date information",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "BASE_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "BASE_SYSTEM_PROMPT = \"\"\"\nYou are Ollama Engineer, an AI assistant powered Ollama models, specialized in software development with access to a variety of tools and the ability to instruct and direct a coding agent and a code execution one. Your capabilities include:\n1. Creating and managing project structures\n2. Writing, debugging, and improving code across multiple languages\n3. Providing architectural insights and applying design patterns\n4. Staying current with the latest technologies and best practices\n5. Analyzing and manipulating files within the project directory\n6. Performing web searches for up-to-date information\n7. Executing code and analyzing its output within an isolated 'code_execution_env' virtual environment\n8. Managing and stopping running processes started within the 'code_execution_env'",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "AUTOMODE_SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "AUTOMODE_SYSTEM_PROMPT = \"\"\"\nYou are currently in automode. Follow these guidelines:\n1. Goal Setting:\n   - Set clear, achievable goals based on the user's request.\n   - Break down complex tasks into smaller, manageable goals.\n2. Goal Execution:\n   - Work through goals systematically, using appropriate tools for each task.\n   - Utilize file operations, code writing, and web searches as needed.\n   - Always read a file before editing and review changes after editing.\n3. Progress Tracking:",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "tools",
        "kind": 5,
        "importPath": "Claude-Eng-v2.ollama-eng",
        "description": "Claude-Eng-v2.ollama-eng",
        "peekOfCode": "tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"create_folder\",\n            \"description\": \"Create a new folder at the specified path\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"path\": {",
        "detail": "Claude-Eng-v2.ollama-eng",
        "documentation": {}
    },
    {
        "label": "SystemPrompts",
        "kind": 6,
        "importPath": "prompts.system_prompts",
        "description": "prompts.system_prompts",
        "peekOfCode": "class SystemPrompts:\n    TOOL_USAGE = \"\"\"\n    When using tools, please follow these guidelines:\n    1. Think carefully about which tool is appropriate for the task\n    2. Only use tools when necessary\n    3. Ask for clarification if required parameters are missing\n    4. Explain your choices and results in a natural way\n    5. Available tools and their use cases\n    6. Chain multiple tools together to achieve complex goals:\n       - Break down the goal into logical steps",
        "detail": "prompts.system_prompts",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "kind": 6,
        "importPath": "tools.base",
        "description": "tools.base",
        "peekOfCode": "class BaseTool(ABC):\n    @property\n    @abstractmethod\n    def name(self) -> str:\n        \"\"\"Tool name that matches the regex ^[a-zA-Z0-9_-]{1,64}$\"\"\"\n        pass\n    @property\n    @abstractmethod\n    def description(self) -> str:\n        \"\"\"Detailed description of what the tool does\"\"\"",
        "detail": "tools.base",
        "documentation": {}
    },
    {
        "label": "BrowserTool",
        "kind": 6,
        "importPath": "tools.browsertool",
        "description": "tools.browsertool",
        "peekOfCode": "class BrowserTool(BaseTool):\n    name = \"browsertool\"\n    description = '''\n    Opens URLs in the system's default web browser.\n    Accepts a single URL or a list of URLs.\n    Validates URL format and supports http/https protocols.\n    Returns feedback on which URLs were successfully opened.\n    '''\n    input_schema = {\n        \"type\": \"object\",",
        "detail": "tools.browsertool",
        "documentation": {}
    },
    {
        "label": "CodeFormatter",
        "kind": 6,
        "importPath": "tools.codeformatter",
        "description": "tools.codeformatter",
        "peekOfCode": "class CodeFormatter(BaseTool):\n    name = \"codeformatter\"\n    description = '''\n    Formats and syntax-highlights code blocks with support for multiple languages.\n    Handles inline code, block code, and diff formatting.\n    Supports line numbers and syntax highlighting.\n    Auto-detects language if not specified.\n    Returns markdown-compatible formatted code.\n    '''\n    input_schema = {",
        "detail": "tools.codeformatter",
        "documentation": {}
    },
    {
        "label": "CommandListFormatter",
        "kind": 6,
        "importPath": "tools.commandlistformatter",
        "description": "tools.commandlistformatter",
        "peekOfCode": "class CommandListFormatter(BaseTool):\n    name = \"commandlistformatter\"\n    description = '''\n    Formats a list of commands or events into a clean, readable structure.\n    Features:\n    - One command per line with proper indentation\n    - Optional grouping by prefix/category\n    - Strips common prefixes for cleaner display\n    - Supports JSON or plain text input\n    - Multiple output formats (plain text, markdown)",
        "detail": "tools.commandlistformatter",
        "documentation": {}
    },
    {
        "label": "ContentAnalyzer",
        "kind": 6,
        "importPath": "tools.contentanalyzer",
        "description": "tools.contentanalyzer",
        "peekOfCode": "class ContentAnalyzer(BaseTool):\n    name = \"contentanalyzer\"\n    description = '''\n    Analyzes content (text, code, or images) and generates structured summaries.\n    Provides organized analysis with main points, technical details, and action items.\n    Supports multiple output formats and content type detection.\n    Includes metadata and contextual information in analysis results.\n    '''\n    input_schema = {\n        \"type\": \"object\",",
        "detail": "tools.contentanalyzer",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "kind": 6,
        "importPath": "tools.contextmanager",
        "description": "tools.contextmanager",
        "peekOfCode": "class ContextManager:\n    \"\"\"Manages context data capture, AI summarization, and storage.\"\"\"\n    def __init__(self):\n        self.context_dir = Config.CONTEXT_DIR\n        self.archive_dir = Config.CONTEXT_ARCHIVE_DIR\n        self.client = Anthropic(api_key=Config.ANTHROPIC_API_KEY)\n        self._ensure_directories()\n    def _ensure_directories(self):\n        \"\"\"Ensures required directories exist and are hidden.\"\"\"\n        for directory in [self.context_dir, self.archive_dir]:",
        "detail": "tools.contextmanager",
        "documentation": {}
    },
    {
        "label": "CreateFoldersTool",
        "kind": 6,
        "importPath": "tools.createfolderstool",
        "description": "tools.createfolderstool",
        "peekOfCode": "class CreateFoldersTool(BaseTool):\n    name = \"createfolderstool\"\n    description = '''\n    Creates new folders at specified paths, including nested directories if needed.\n    Accepts a list of folder paths and creates each folder along with any necessary parent directories.\n    Supports both absolute and relative paths.\n    Returns status messages for each folder creation attempt.\n    '''\n    input_schema = {\n        \"type\": \"object\",",
        "detail": "tools.createfolderstool",
        "documentation": {}
    },
    {
        "label": "DiffEditorTool",
        "kind": 6,
        "importPath": "tools.diffeditortool",
        "description": "tools.diffeditortool",
        "peekOfCode": "class DiffEditorTool(BaseTool):\n    name = \"diffeditortool\"\n    description = '''\n    Performs a precise replacement of a given text snippet in a specified file.\n    It takes the following inputs:\n    - path: The path to the target file.\n    - old_text: The exact substring that should be replaced.\n    - new_text: The new substring that replaces the old one.\n    The tool will:\n    1. Read the file contents.",
        "detail": "tools.diffeditortool",
        "documentation": {}
    },
    {
        "label": "DuckduckgoTool",
        "kind": 6,
        "importPath": "tools.duckduckgotool",
        "description": "tools.duckduckgotool",
        "peekOfCode": "class DuckduckgoTool(BaseTool):\n    name = \"duckduckgotool\"\n    description = '''\n    Performs a search using DuckDuckGo and returns the top search results.\n    Returns titles, snippets, and URLs of the search results.\n    Use this tool when you need to search for current information on the internet.\n    '''\n    input_schema = {\n        \"type\": \"object\",\n        \"properties\": {",
        "detail": "tools.duckduckgotool",
        "documentation": {}
    },
    {
        "label": "E2bCodeTool",
        "kind": 6,
        "importPath": "tools.e2bcodetool",
        "description": "tools.e2bcodetool",
        "peekOfCode": "class E2bCodeTool(BaseTool):\n    name = \"e2bcodetool\"\n    description = '''\n    Executes Python code in a sandboxed environment using e2b-code-interpreter.\n    Features:\n    - Execute Python code safely in isolation\n    - Upload files to sandbox\n    - Download files from sandbox\n    - Support for environment variables\n    Returns execution results including stdout, stderr, and file contents.",
        "detail": "tools.e2bcodetool",
        "documentation": {}
    },
    {
        "label": "FileContentReaderTool",
        "kind": 6,
        "importPath": "tools.filecontentreadertool",
        "description": "tools.filecontentreadertool",
        "peekOfCode": "class FileContentReaderTool(BaseTool):\n    name = \"filecontentreadertool\"\n    description = '''\n    Reads content from multiple files and returns their contents.\n    Accepts a list of file paths and returns a dictionary with file paths as keys\n    and their content as values.\n    Handles file reading errors gracefully with built-in Python exceptions.\n    When given a directory, recursively reads all text files while skipping binaries and common ignore patterns.\n    '''\n    # Files and directories to ignore",
        "detail": "tools.filecontentreadertool",
        "documentation": {}
    },
    {
        "label": "FileCreatorTool",
        "kind": 6,
        "importPath": "tools.filecreatortool",
        "description": "tools.filecreatortool",
        "peekOfCode": "class FileCreatorTool(BaseTool):\n    name = \"filecreatortool\"\n    description = '''\n    Creates new files with specified content.\n    IMPORTANT: The input must follow this exact structure:\n    1. For a single file:\n       {\n           \"files\": {\n               \"path\": \"path/to/file.txt\",\n               \"content\": \"file content here\"",
        "detail": "tools.filecreatortool",
        "documentation": {}
    },
    {
        "label": "FileEditTool",
        "kind": 6,
        "importPath": "tools.fileedittool",
        "description": "tools.fileedittool",
        "peekOfCode": "class FileEditTool(BaseTool):\n    name = \"fileedittool\"\n    description = '''\n    A tool for editing file contents with support for:\n    - Full file content replacement\n    - Partial content editing by line numbers\n    - Pattern-based text search and replace\n    - Multiple file type support\n    - Error handling for file operations\n    '''",
        "detail": "tools.fileedittool",
        "documentation": {}
    },
    {
        "label": "LintingTool",
        "kind": 6,
        "importPath": "tools.lintingtool",
        "description": "tools.lintingtool",
        "peekOfCode": "class LintingTool(BaseTool):\n    name = \"lintingtool\"\n    description = '''\n    Runs the Ruff linter on the given Python files or directories to detect and fix coding style or syntax issues.\n    Supports configurable rule selection, automatic fixes, unsafe fixes, adding noqa directives, and watch mode.\n    Returns the linter output as a string.\n    '''\n    input_schema = {\n        \"type\": \"object\",\n        \"properties\": {",
        "detail": "tools.lintingtool",
        "documentation": {}
    },
    {
        "label": "LiveKitContextTool",
        "kind": 6,
        "importPath": "tools.livekitcontexttool",
        "description": "tools.livekitcontexttool",
        "peekOfCode": "class LiveKitContextTool(BaseTool):\n    \"\"\"\n    A tool for managing LiveKit room context and real-time communication.\n    Features:\n    - Manages LiveKit room connections\n    - Stores and retrieves conversation context\n    - Handles message storage and synchronization\n    - Supports real-time data publishing\n    Parameters:\n        conversation_id (str, optional): ID for the conversation context",
        "detail": "tools.livekitcontexttool",
        "documentation": {}
    },
    {
        "label": "ScreenshotTool",
        "kind": 6,
        "importPath": "tools.screenshottool",
        "description": "tools.screenshottool",
        "peekOfCode": "class ScreenshotTool(BaseTool):\n    name = \"screenshottool\"\n    description = '''\n    Captures a screenshot of the current screen and returns an image block ready to be sent to Claude.\n    Optionally, a specific region of the screen can be captured by providing coordinates.\n    Inputs:\n    - region (optional): A list of four integers [x, y, width, height] specifying the region of the screen to capture.\n      If omitted, captures the entire screen.\n    The output is a JSON-formatted string that can be included directly as part of the conversation content:\n    [",
        "detail": "tools.screenshottool",
        "documentation": {}
    },
    {
        "label": "SelfEvolverTool",
        "kind": 6,
        "importPath": "tools.selfevolver",
        "description": "tools.selfevolver",
        "peekOfCode": "class SelfEvolverTool(BaseTool):\n    \"\"\"\n    A tool that can propose and apply changes to local Python files, subject to user approval.\n    The LLM can call this tool to self-modify or create new code, if enabled.\n    \"\"\"\n    name = \"self_evolver\"\n    description = (\n        \"Propose and apply code modifications to local files. \"\n        \"Provide a 'filename' and the full new content or a diff in 'content_diff'. \"\n        \"User must confirm before changes are written.\"",
        "detail": "tools.selfevolver",
        "documentation": {}
    },
    {
        "label": "ToolCreatorTool",
        "kind": 6,
        "importPath": "tools.toolcreator",
        "description": "tools.toolcreator",
        "peekOfCode": "class ToolCreatorTool(BaseTool):\n    name = \"toolcreator\"\n    description = '''\n    Creates a new tool based on a natural language description.\n    Use this when you need a new capability that isn't available in current tools.\n    The tool will be automatically generated and saved to the tools directory.\n    Returns the generated tool code and creation status.\n    '''\n    input_schema = {\n        \"type\": \"object\",",
        "detail": "tools.toolcreator",
        "documentation": {}
    },
    {
        "label": "ToolName",
        "kind": 6,
        "importPath": "tools.toolcreator",
        "description": "tools.toolcreator",
        "peekOfCode": "class ToolName(BaseTool):  # Class name must match name property in uppercase first letter\n    name = \"toolname\"  # Must match class name in lowercase\n    description = '''\n    Detailed description here.\n    Multiple lines for clarity.\n    '''\n    input_schema = {{\n        \"type\": \"object\",\n        \"properties\": {{\n            # Required input parameters",
        "detail": "tools.toolcreator",
        "documentation": {}
    },
    {
        "label": "UVPackageManager",
        "kind": 6,
        "importPath": "tools.uvpackagemanager",
        "description": "tools.uvpackagemanager",
        "peekOfCode": "class UVPackageManager(BaseTool):\n    name = \"uvpackagemanager\"\n    description = '''\n    Comprehensive interface to the uv package manager providing package management,\n    project management, Python version management, tool management, and script support.\n    Supports all major platforms with pip compatibility.\n    '''\n    input_schema = {\n        \"type\": \"object\",\n        \"properties\": {",
        "detail": "tools.uvpackagemanager",
        "documentation": {}
    },
    {
        "label": "WebScraperTool",
        "kind": 6,
        "importPath": "tools.webscrapertool",
        "description": "tools.webscrapertool",
        "peekOfCode": "class WebScraperTool(BaseTool):\n    name = \"webscrapertool\"\n    description = '''\n    An enhanced web scraper that fetches a web page, extracts and returns its main textual content,\n    along with the page title and meta description if available. It attempts to identify the main\n    article content more intelligently, remove navigational and advertising elements, and preserve\n    heading structure for context. Useful for obtaining cleaner, more relevant textual information.\n    '''\n    input_schema = {\n        \"type\": \"object\",",
        "detail": "tools.webscrapertool",
        "documentation": {}
    },
    {
        "label": "CustomJSONEncoder",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class CustomJSONEncoder(JSONEncoder):\n    def default(self, obj):\n        try:\n            # Convert TextBlock objects to their string representation\n            if hasattr(obj, 'text'):\n                return str(obj.text)\n            if hasattr(obj, '__dict__'):\n                return obj.__dict__\n            return str(obj)\n        except Exception:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def home():\n    return render_template('index.html')\n@app.route('/chat', methods=['POST'])\ndef chat():\n    data = request.json\n    message = data.get('message', '')\n    image_data = data.get('image')  # Get the base64 image data\n    # Get media type from request or extract from data URL\n    media_type = data.get('currentMediaType')\n    if not media_type and image_data and ',' in image_data and ':' in image_data.split(',')[0]:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "chat",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def chat():\n    data = request.json\n    message = data.get('message', '')\n    image_data = data.get('image')  # Get the base64 image data\n    # Get media type from request or extract from data URL\n    media_type = data.get('currentMediaType')\n    if not media_type and image_data and ',' in image_data and ':' in image_data.split(',')[0]:\n        media_type = image_data.split(',')[0].split(':')[1].split(';')[0]\n    media_type = media_type or 'image/jpeg'  # Fallback if still not found\n    # Prepare the message content",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def upload_file():\n    if 'file' not in request.files:\n        return jsonify({'error': 'No file part'}), 400\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': 'No selected file'}), 400\n    if file and file.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):\n        filename = secure_filename(file.filename)\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        file.save(filepath)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def reset():\n    # Reset the assistant's conversation history\n    assistant.reset()\n    return jsonify({'status': 'success'})\nif __name__ == '__main__':\n    app.run(debug=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__, static_folder='static')\napp.json_encoder = CustomJSONEncoder\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\n# Ensure upload directory exists\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n# Initialize the assistant\nassistant = Assistant()\n@app.route('/')\ndef home():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.json_encoder",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.json_encoder = CustomJSONEncoder\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\n# Ensure upload directory exists\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n# Initialize the assistant\nassistant = Assistant()\n@app.route('/')\ndef home():\n    return render_template('index.html')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\n# Ensure upload directory exists\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n# Initialize the assistant\nassistant = Assistant()\n@app.route('/')\ndef home():\n    return render_template('index.html')\n@app.route('/chat', methods=['POST'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['MAX_CONTENT_LENGTH']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\n# Ensure upload directory exists\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n# Initialize the assistant\nassistant = Assistant()\n@app.route('/')\ndef home():\n    return render_template('index.html')\n@app.route('/chat', methods=['POST'])\ndef chat():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "assistant",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "assistant = Assistant()\n@app.route('/')\ndef home():\n    return render_template('index.html')\n@app.route('/chat', methods=['POST'])\ndef chat():\n    data = request.json\n    message = data.get('message', '')\n    image_data = data.get('image')  # Get the base64 image data\n    # Get media type from request or extract from data URL",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "kind": 6,
        "importPath": "ce3 copy",
        "description": "ce3 copy",
        "peekOfCode": "class Assistant:\n    \"\"\"\n    The Assistant class manages:\n    - Loading of tools from a specified directory.\n    - Interaction with the Anthropics API (message completion).\n    - Handling user commands such as 'refresh' and 'reset'.\n    - Token usage tracking and display.\n    - Tool execution upon request from model responses.\n    \"\"\"\n    def __init__(self):",
        "detail": "ce3 copy",
        "documentation": {}
    },
    {
        "label": "SPINNER_CLEANUP_TIMEOUT",
        "kind": 5,
        "importPath": "ce3 copy",
        "description": "ce3 copy",
        "peekOfCode": "SPINNER_CLEANUP_TIMEOUT = getattr(Config, 'SPINNER_CLEANUP_TIMEOUT', 2.0)\nfrom prompts.system_prompts import SystemPrompts\nfrom tools.base import BaseTool\nfrom tools.contextmanager import ContextManager\n# Configure logging to only show ERROR level and above\nlogging.basicConfig(\n    level=logging.ERROR,\n    format='%(levelname)s: %(message)s'\n)\nclass Assistant:",
        "detail": "ce3 copy",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "kind": 6,
        "importPath": "ce3",
        "description": "ce3",
        "peekOfCode": "class Assistant:\n    \"\"\"\n    The Assistant class manages:\n    - Loading of tools from a specified directory.\n    - Interaction with the Anthropics API (message completion).\n    - Handling user commands such as 'refresh' and 'reset'.\n    - Token usage tracking and display.\n    - Tool execution upon request from model responses.\n    \"\"\"\n    def __init__(self):",
        "detail": "ce3",
        "documentation": {}
    },
    {
        "label": "SPINNER_CLEANUP_TIMEOUT",
        "kind": 5,
        "importPath": "ce3",
        "description": "ce3",
        "peekOfCode": "SPINNER_CLEANUP_TIMEOUT = getattr(Config, 'SPINNER_CLEANUP_TIMEOUT', 2.0)\nfrom prompts.system_prompts import SystemPrompts\nfrom tools.base import BaseTool\nfrom tools.contextmanager import ContextManager\n# Configure logging to only show ERROR level and above\nlogging.basicConfig(\n    level=logging.ERROR,\n    format='%(levelname)s: %(message)s'\n)\nclass Assistant:",
        "detail": "ce3",
        "documentation": {}
    },
    {
        "label": "Assistant",
        "kind": 6,
        "importPath": "ce3prime",
        "description": "ce3prime",
        "peekOfCode": "class Assistant:\n    \"\"\"\n    The Assistant class manages:\n    - Loading of tools from a specified directory.\n    - Interaction with the Anthropics API (message completion).\n    - Handling user commands such as 'refresh' and 'reset'.\n    - Token usage tracking and display.\n    - Tool execution upon request from model responses.\n    \"\"\"\n    def __init__(self):",
        "detail": "ce3prime",
        "documentation": {}
    },
    {
        "label": "SPINNER_CLEANUP_TIMEOUT",
        "kind": 5,
        "importPath": "ce3prime",
        "description": "ce3prime",
        "peekOfCode": "SPINNER_CLEANUP_TIMEOUT = getattr(Config, 'SPINNER_CLEANUP_TIMEOUT', 2.0)\nfrom prompts.system_prompts import SystemPrompts\nfrom tools.base import BaseTool\nfrom tools.contextmanager import ContextManager\n# Configure logging to only show ERROR level and above\nlogging.basicConfig(\n    level=logging.ERROR,\n    format='%(levelname)s: %(message)s'\n)\nclass Assistant:",
        "detail": "ce3prime",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY')\n    MODEL = \"claude-3-5-sonnet-20241022\"\n    MAX_TOKENS = 8000\n    MAX_CONVERSATION_TOKENS = 200000  # Maximum tokens per conversation\n    # Paths\n    BASE_DIR = Path(__file__).parent\n    TOOLS_DIR = BASE_DIR / \"tools\"\n    PROMPTS_DIR = BASE_DIR / \"prompts\"\n    CONTEXT_DIR = BASE_DIR / \".context\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "TestCalculateSum",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class TestCalculateSum(unittest.TestCase):\n    \"\"\"Test cases for the calculate_sum function.\"\"\"\n    def test_normal_list(self):\n        \"\"\"Test with a normal list of numbers.\"\"\"\n        self.assertEqual(calculate_sum([1, 2, 3, 4, 5]), 15)\n    def test_float_numbers(self):\n        \"\"\"Test with floating point numbers.\"\"\"\n        self.assertAlmostEqual(calculate_sum([1.5, 2.5, 3.5]), 7.5)\n    def test_empty_list(self):\n        \"\"\"Test that empty list raises ValueError.\"\"\"",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "TestCalculateMedian",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class TestCalculateMedian(unittest.TestCase):\n    \"\"\"Test cases for the calculate_median function.\"\"\"\n    def test_odd_length_list(self):\n        \"\"\"Test median with odd number of elements.\"\"\"\n        self.assertEqual(calculate_median([1, 2, 3, 4, 5]), 3)\n    def test_even_length_list(self):\n        \"\"\"Test median with even number of elements.\"\"\"\n        self.assertEqual(calculate_median([1, 2, 3, 4]), 2.5)\n    def test_unordered_list(self):\n        \"\"\"Test median with unordered list.\"\"\"",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "calculate_sum",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def calculate_sum(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the sum of a list of numbers.\n    Args:\n        numbers (List[float]): A list of numbers to sum\n    Returns:\n        float: The sum of all numbers in the list\n    Raises:\n        ValueError: If the input list is empty\n    \"\"\"",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "calculate_median",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def calculate_median(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    Args:\n        numbers (List[float]): A list of numbers to find the median of\n    Returns:\n        float: The median value of the list\n    Raises:\n        ValueError: If the input list is empty\n    \"\"\"",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def main() -> None:\n    \"\"\"Main function to demonstrate the usage of calculate_sum and calculate_median.\"\"\"\n    try:\n        numbers = [1, 2, 3, 4, 5]\n        total = calculate_sum(numbers)\n        median = calculate_median(numbers)\n        print(f\"The sum is: {total}\")\n        print(f\"The median is: {median}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")",
        "detail": "test",
        "documentation": {}
    }
]